%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Neural Activity Following Stroke and Stimulation to Infer Lesion Location
% in Macaque Sensorimotor Cortex
% Author: Karam Khateeb
% 
% This script is visualizing lesion+stim data processed by Jasmine Zhou.
% 
% May 17 - July 22, 2021
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% 1. Initialize Important Variables

Fs = 1000; % downsampled frequency
limit30 = 30*60*Fs; % number of samples in 30 minutes
channels = 1:32; % there are 32 channels

% X and Y locations of electrodes in array in mm
x = [4 4 3 2 2 2 1 1 1 1 2 2 3 3 3 4 4 4 5 6 6 7 8 7 7 7 6 6 6 5 5 5]*0.75;
y = [3 1 2 1 5 3 4 2 8 6 9 7 6 4 8 5 7 9 8 9 7 8 5 6 2 4 3 5 1 6 4 2]*0.75;

stimChan = 18; % index of stim channel

% Choose a colormap for plotting all of the figures
cmp = [248 117 117;64 78 77;8 178 227]/255;
map = [linspace(248,64,64) linspace(64,8,64);
    linspace(117,78,64) linspace(78,178,64);
    linspace(117,77,64) linspace(77,227,64)]' / 255;

% color codes for each monkey:
colorD = [29 32 32]/255;
colorE = [136 150 150]/255;
colorF = [6 125 157]/255;
colorG = [78 212 249]/255;

disp('Initialized Important Variables')

goodChansD = [1:7 9:32];
goodChansE = [1:7 9:23 26:32];
goodChansF = [3 4 6 11:16 18:20 22 25:27 29:31];
goodChansG = channels; % all channels for G are good

%% 2. Make Subfigure showing stim waveforms

% We used 6 stimulation blocks. Each block lasted 10 min, with 2 min of 
% baseline recordings in between the blocks. The stimulation trains had a 
% 5 Hz burst frequency with five 1 kHz biphasic pulses within each burst. 
% The pulse widths were 200 us for both phases, and the interphase interval
% was 50 us. The stimulation amplitude was 60 Î¼A for both phases.

burstFreq = 5; % Hz
pulseFreq = 1000; % Hz

pulseWids = 200; % us for both phases
ipi = 50; % us interphase interval

amp = 60; % uA

% figure for one single pulse
pulse = [linspace(60,60,pulseWids) linspace(0,0,ipi) linspace(-60,-60,pulseWids)];
figure('color','w')
plot([linspace(0,0,100) pulse linspace(0,0,100)],'color','k','linewidth',2)
box off, %axis off

% print -dpdf -painters PulseFigure

% figure for one second of pulses
t = 1:1000000; % time vector in us (total 1 second)
interPulseWid = (1000000/pulseFreq) - length(pulse);
burst = [pulse linspace(0,0,interPulseWid) ...
    pulse linspace(0,0,interPulseWid) ...
    pulse linspace(0,0,interPulseWid) ...
    pulse linspace(0,0,interPulseWid) pulse];
interBurstWid = (1000000/burstFreq) - length(burst);
oneSec = [linspace(0,0,interBurstWid/2) burst linspace(0,0,interBurstWid) ...
    burst linspace(0,0,interBurstWid) ...
    burst linspace(0,0,interBurstWid) ...
    burst linspace(0,0,interBurstWid) ...
    burst linspace(0,0,interBurstWid/2)];
figure('color','w')
plot(t,oneSec,'color','k','linewidth',1)
box off

% print -dpdf -painters StimSecondFigure

% figure for one burst
figure('color','w')
plot([linspace(0,0,1500) burst linspace(0,0,1500)],'color','k','linewidth',2)
box off

% print -dpdf -painters BurstFigure

%% 3. Get Power Arrays for Monkeys D and E For Stim Time Points

% Load Monkey D All Time-Series
tic
load('CleanedSignalsPT4.mat');
disp('Loading Cleaned PT4 Signals')
toc

% Load Monkey E All Time-Series
load('CleanedSignalsPT5.mat');
disp('Loading Cleaned PT5 Signals')
toc

% time points for power calculations
limit70_72 = (70*60*Fs):(72*60*Fs); % for sham 10 min stim recordings
limit82_84 = (82*60*Fs):(84*60*Fs); % for sham 30 min stim recordings
limit118_120 = (118*60*Fs):(120*60*Fs); % for sham 50 min stim recordings

% Initialize for power calculation
% Monkey D
totPwrD_base_hg = zeros(1,length(channels));
totPwrD_base_lg = zeros(1,length(channels));
totPwrD_base_bt = zeros(1,length(channels));
totPwrD_base_th = zeros(1,length(channels));

totPwrD_preS_hg = zeros(1,length(channels));
totPwrD_preS_lg = zeros(1,length(channels));
totPwrD_preS_bt = zeros(1,length(channels));
totPwrD_preS_th = zeros(1,length(channels));

% totPwrD_stm1_hg = zeros(1,length(channels));
% totPwrD_stm1_lg = zeros(1,length(channels));
% totPwrD_stm1_bt = zeros(1,length(channels));
% totPwrD_stm1_th = zeros(1,length(channels));

totPwrD_stm3_hg = zeros(1,length(channels));
totPwrD_stm3_lg = zeros(1,length(channels));
totPwrD_stm3_bt = zeros(1,length(channels));
totPwrD_stm3_th = zeros(1,length(channels));

totPwrD_stm5_hg = zeros(1,length(channels));
totPwrD_stm5_lg = zeros(1,length(channels));
totPwrD_stm5_bt = zeros(1,length(channels));
totPwrD_stm5_th = zeros(1,length(channels));

% totPwrD_post_hg = zeros(1,length(channels));
% totPwrD_post_lg = zeros(1,length(channels));
% totPwrD_post_bt = zeros(1,length(channels));
% totPwrD_post_th = zeros(1,length(channels));

% Monkey E
totPwrE_base_hg = zeros(1,length(channels));
totPwrE_base_lg = zeros(1,length(channels));
totPwrE_base_bt = zeros(1,length(channels));
totPwrE_base_th = zeros(1,length(channels));

totPwrE_preS_hg = zeros(1,length(channels));
totPwrE_preS_lg = zeros(1,length(channels));
totPwrE_preS_bt = zeros(1,length(channels));
totPwrE_preS_th = zeros(1,length(channels));

totPwrE_stm1_hg = zeros(1,length(channels));
totPwrE_stm1_lg = zeros(1,length(channels));
totPwrE_stm1_bt = zeros(1,length(channels));
totPwrE_stm1_th = zeros(1,length(channels));

totPwrE_stm3_hg = zeros(1,length(channels));
totPwrE_stm3_lg = zeros(1,length(channels));
totPwrE_stm3_bt = zeros(1,length(channels));
totPwrE_stm3_th = zeros(1,length(channels));

totPwrE_stm5_hg = zeros(1,length(channels));
totPwrE_stm5_lg = zeros(1,length(channels));
totPwrE_stm5_bt = zeros(1,length(channels));
totPwrE_stm5_th = zeros(1,length(channels));

totPwrE_post_hg = zeros(1,length(channels));
totPwrE_post_lg = zeros(1,length(channels));
totPwrE_post_bt = zeros(1,length(channels));
totPwrE_post_th = zeros(1,length(channels));

for iChan = channels
    
    % Monkey D baseline
    totPwrD_base_hg(iChan) = SignalPower(cleanD_allbase_hg(1:limit30,iChan),Fs);
    totPwrD_base_lg(iChan) = SignalPower(cleanD_allbase_lg(1:limit30,iChan),Fs);
    totPwrD_base_bt(iChan) = SignalPower(cleanD_allbase_bt(1:limit30,iChan),Fs);
    totPwrD_base_th(iChan) = SignalPower(cleanD_allbase_th(1:limit30,iChan),Fs);
    
    % Monkey D first 30 minutes post-illumination (preS = preStim)
    totPwrD_preS_hg(iChan) = SignalPower(cleanD_allpost_hg(1:limit30,iChan),Fs);
    totPwrD_preS_lg(iChan) = SignalPower(cleanD_allpost_lg(1:limit30,iChan),Fs);
    totPwrD_preS_bt(iChan) = SignalPower(cleanD_allpost_bt(1:limit30,iChan),Fs);
    totPwrD_preS_th(iChan) = SignalPower(cleanD_allpost_th(1:limit30,iChan),Fs);
    
    % Monkey D after 10 minutes of sham stim
%     totPwrD_stm1_hg(iChan) = SignalPower(cleanD_allpost_hg(limit70_72,iChan),Fs);
%     totPwrD_stm1_lg(iChan) = SignalPower(cleanD_allpost_lg(limit70_72,iChan),Fs);
%     totPwrD_stm1_bt(iChan) = SignalPower(cleanD_allpost_bt(limit70_72,iChan),Fs);
%     totPwrD_stm1_th(iChan) = SignalPower(cleanD_allpost_th(limit70_72,iChan),Fs);
    
    % Monkey D after 30 minutes of sham stim
    % for PT4, equivalent to 38 minutes before end of postPT recording
    limit38 = 38*60*Fs; limit36 = 36*60*Fs;
    totPwrD_stm3_hg(iChan) = SignalPower(cleanD_allpost_hg((end-limit38+1):(end-limit36+1),iChan),Fs);
    totPwrD_stm3_lg(iChan) = SignalPower(cleanD_allpost_lg((end-limit38+1):(end-limit36+1),iChan),Fs);
    totPwrD_stm3_bt(iChan) = SignalPower(cleanD_allpost_bt((end-limit38+1):(end-limit36+1),iChan),Fs);
    totPwrD_stm3_th(iChan) = SignalPower(cleanD_allpost_th((end-limit38+1):(end-limit36+1),iChan),Fs);
    
    % Monkey D after 50 minutes of sham stim (for PT4, equivalent to last two min of
    % recording)
    limit2 = 2*60*Fs;
    totPwrD_stm5_hg(iChan) = SignalPower(cleanD_allpost_hg((end-limit2+1):end,iChan),Fs);
    totPwrD_stm5_lg(iChan) = SignalPower(cleanD_allpost_lg((end-limit2+1):end,iChan),Fs);
    totPwrD_stm5_bt(iChan) = SignalPower(cleanD_allpost_bt((end-limit2+1):end,iChan),Fs);
    totPwrD_stm5_th(iChan) = SignalPower(cleanD_allpost_th((end-limit2+1):end,iChan),Fs);
    
    % Monkey D last 30 minutes of post-PT recordings (no stim)
%     totPwrD_post_hg(iChan) = SignalPower(cleanD_allpost_hg(end-limit30+1:end,iChan),Fs);
%     totPwrD_post_lg(iChan) = SignalPower(cleanD_allpost_lg(end-limit30+1:end,iChan),Fs);
%     totPwrD_post_bt(iChan) = SignalPower(cleanD_allpost_bt(end-limit30+1:end,iChan),Fs);
%     totPwrD_post_th(iChan) = SignalPower(cleanD_allpost_th(end-limit30+1:end,iChan),Fs);

    % Monkey E baseline
    totPwrE_base_hg(iChan) = SignalPower(cleanE_allbase_hg(1:limit30,iChan),Fs);
    totPwrE_base_lg(iChan) = SignalPower(cleanE_allbase_lg(1:limit30,iChan),Fs);
    totPwrE_base_bt(iChan) = SignalPower(cleanE_allbase_bt(1:limit30,iChan),Fs);
    totPwrE_base_th(iChan) = SignalPower(cleanE_allbase_th(1:limit30,iChan),Fs);
    
    % Monkey E first 30 minutes post-illumination (preS = preStim)
    totPwrE_preS_hg(iChan) = SignalPower(cleanE_allpost_hg(1:limit30,iChan),Fs);
    totPwrE_preS_lg(iChan) = SignalPower(cleanE_allpost_lg(1:limit30,iChan),Fs);
    totPwrE_preS_bt(iChan) = SignalPower(cleanE_allpost_bt(1:limit30,iChan),Fs);
    totPwrE_preS_th(iChan) = SignalPower(cleanE_allpost_th(1:limit30,iChan),Fs);
    
    % Monkey E after 10 minutes of sham stim
    totPwrE_stm1_hg(iChan) = SignalPower(cleanE_allpost_hg(limit70_72,iChan),Fs);
    totPwrE_stm1_lg(iChan) = SignalPower(cleanE_allpost_lg(limit70_72,iChan),Fs);
    totPwrE_stm1_bt(iChan) = SignalPower(cleanE_allpost_bt(limit70_72,iChan),Fs);
    totPwrE_stm1_th(iChan) = SignalPower(cleanE_allpost_th(limit70_72,iChan),Fs);
    
    % Monkey E after 30 minutes of sham stim
    totPwrE_stm3_hg(iChan) = SignalPower(cleanE_allpost_hg(limit82_84,iChan),Fs);
    totPwrE_stm3_lg(iChan) = SignalPower(cleanE_allpost_lg(limit82_84,iChan),Fs);
    totPwrE_stm3_bt(iChan) = SignalPower(cleanE_allpost_bt(limit82_84,iChan),Fs);
    totPwrE_stm3_th(iChan) = SignalPower(cleanE_allpost_th(limit82_84,iChan),Fs);
    
    % Monkey E after 50 minutes of sham stim
    totPwrE_stm5_hg(iChan) = SignalPower(cleanE_allpost_hg(limit118_120,iChan),Fs);
    totPwrE_stm5_lg(iChan) = SignalPower(cleanE_allpost_lg(limit118_120,iChan),Fs);
    totPwrE_stm5_bt(iChan) = SignalPower(cleanE_allpost_bt(limit118_120,iChan),Fs);
    totPwrE_stm5_th(iChan) = SignalPower(cleanE_allpost_th(limit118_120,iChan),Fs);
    
    % Monkey E last 30 minutes of post-PT recordings (no stim)
    totPwrE_post_hg(iChan) = SignalPower(cleanE_allpost_hg(end-limit30+1:end,iChan),Fs);
    totPwrE_post_lg(iChan) = SignalPower(cleanE_allpost_lg(end-limit30+1:end,iChan),Fs);
    totPwrE_post_bt(iChan) = SignalPower(cleanE_allpost_bt(end-limit30+1:end,iChan),Fs);
    totPwrE_post_th(iChan) = SignalPower(cleanE_allpost_th(end-limit30+1:end,iChan),Fs);
end

% Remove Channel 8 from Monkey D analysis and channels 8 and 24 for monk E
totPwrD_base_hg(8) = nan; totPwrD_base_lg(8) = nan;
totPwrD_base_bt(8) = nan; totPwrD_base_th(8) = nan;
totPwrD_stm3_hg(8) = nan; totPwrD_stm3_lg(8) = nan;
totPwrD_stm3_bt(8) = nan; totPwrD_stm3_th(8) = nan;
totPwrD_stm5_hg(8) = nan; totPwrD_stm5_lg(8) = nan;
totPwrD_stm5_bt(8) = nan; totPwrD_stm5_th(8) = nan;

totPwrE_base_hg(8) = nan; totPwrE_base_lg(8) = nan;
totPwrE_base_bt(8) = nan; totPwrE_base_th(8) = nan;
totPwrE_stm1_hg(8) = nan; totPwrE_stm1_lg(8) = nan;
totPwrE_stm1_bt(8) = nan; totPwrE_stm1_th(8) = nan;
totPwrE_stm3_hg(8) = nan; totPwrE_stm3_lg(8) = nan;
totPwrE_stm3_bt(8) = nan; totPwrE_stm3_th(8) = nan;
totPwrE_stm5_hg(8) = nan; totPwrE_stm5_lg(8) = nan;
totPwrE_stm5_bt(8) = nan; totPwrE_stm5_th(8) = nan;
totPwrE_post_hg(8) = nan; totPwrE_post_lg(8) = nan;
totPwrE_post_bt(8) = nan; totPwrE_post_th(8) = nan;

totPwrE_base_hg(24) = nan; totPwrE_base_lg(24) = nan;
totPwrE_base_bt(24) = nan; totPwrE_base_th(24) = nan;
totPwrE_stm1_hg(24) = nan; totPwrE_stm1_lg(24) = nan;
totPwrE_stm1_bt(24) = nan; totPwrE_stm1_th(24) = nan;
totPwrE_stm3_hg(24) = nan; totPwrE_stm3_lg(24) = nan;
totPwrE_stm3_bt(24) = nan; totPwrE_stm3_th(24) = nan;
totPwrE_stm5_hg(24) = nan; totPwrE_stm5_lg(24) = nan;
totPwrE_stm5_bt(24) = nan; totPwrE_stm5_th(24) = nan;
totPwrE_post_hg(24) = nan; totPwrE_post_lg(24) = nan;
totPwrE_post_bt(24) = nan; totPwrE_post_th(24) = nan;

totPwrE_base_hg(25) = nan; totPwrE_base_lg(25) = nan;
totPwrE_base_bt(25) = nan; totPwrE_base_th(25) = nan;
totPwrE_stm1_hg(25) = nan; totPwrE_stm1_lg(25) = nan;
totPwrE_stm1_bt(25) = nan; totPwrE_stm1_th(25) = nan;
totPwrE_stm3_hg(25) = nan; totPwrE_stm3_lg(25) = nan;
totPwrE_stm3_bt(25) = nan; totPwrE_stm3_th(25) = nan;
totPwrE_stm5_hg(25) = nan; totPwrE_stm5_lg(25) = nan;
totPwrE_stm5_bt(25) = nan; totPwrE_stm5_th(25) = nan;
totPwrE_post_hg(25) = nan; totPwrE_post_lg(25) = nan;
totPwrE_post_bt(25) = nan; totPwrE_post_th(25) = nan;

%% 4. Load Power Arrays for Monkeys F and G from Pre-Processed Signals

% load Monkey F power arrays
load(['PT6-7 power data' filesep 'totPower_PT6_high gamma.mat']);
load(['PT6-7 power data' filesep 'totPower_PT6_low gamma.mat']);
load(['PT6-7 power data' filesep 'totPower_PT6_beta.mat']);
load(['PT6-7 power data' filesep 'totPower_PT6_theta.mat']);

% For consistent nomenclature - I like to have similar variable have same
% length
totPwrF_base_hg = totPwrF_baseline_hg; 
totPwrF_base_lg = totPwrF_baseline_lg; 
totPwrF_base_bt = totPwrF_baseline_beta; 
totPwrF_base_th = totPwrF_baseline_theta; clearvars -REGEXP totPwrF_baseline*

totPwrF_preS_hg = totPwrF_postPT_1_hg; 
totPwrF_preS_lg = totPwrF_postPT_1_lg; 
totPwrF_preS_bt = totPwrF_postPT_1_beta; 
totPwrF_preS_th = totPwrF_postPT_1_theta; clearvars -REGEXP totPwrF_postPT_*

totPwrF_stm1_hg = totPwrF_stim_1_hg; 
totPwrF_stm1_lg = totPwrF_stim_1_lg; 
totPwrF_stm1_bt = totPwrF_stim_1_beta; 
totPwrF_stm1_th = totPwrF_stim_1_theta; clearvars -REGEXP totPwrF_stim_1_*

totPwrF_stm3_hg = totPwrF_stim_3_hg; 
totPwrF_stm3_lg = totPwrF_stim_3_lg; 
totPwrF_stm3_bt = totPwrF_stim_3_beta; 
totPwrF_stm3_th = totPwrF_stim_3_theta; clearvars -REGEXP totPwrF_stim_3_*

totPwrF_stm5_hg = totPwrF_stim_5_hg; 
totPwrF_stm5_lg = totPwrF_stim_5_lg; 
totPwrF_stm5_bt = totPwrF_stim_5_beta; 
totPwrF_stm5_th = totPwrF_stim_5_theta; clearvars -REGEXP totPwrF_stim_5_*

totPwrF_post_hg = totPwrF_postStim_hg; 
totPwrF_post_lg = totPwrF_postStim_lg; 
totPwrF_post_bt = totPwrF_postStim_beta; 
totPwrF_post_th = totPwrF_postStim_theta; clearvars -REGEXP totPwrF_postStim_*

% load Monkey G power arrays
load(['PT6-7 power data' filesep 'totPower_PT7_high gamma.mat']);
load(['PT6-7 power data' filesep 'totPower_PT7_low gamma.mat']);
load(['PT6-7 power data' filesep 'totPower_PT7_beta.mat']);
load(['PT6-7 power data' filesep 'totPower_PT7_theta.mat']);

% For consistent nomenclature - I like to have similar variable have same
% length
totPwrG_base_hg = totPwrG_baseline_hg; 
totPwrG_base_lg = totPwrG_baseline_lg; 
totPwrG_base_bt = totPwrG_baseline_beta; 
totPwrG_base_th = totPwrG_baseline_theta; clearvars -REGEXP totPwrG_baseline*

totPwrG_preS_hg = totPwrG_postPT_1_hg; 
totPwrG_preS_lg = totPwrG_postPT_1_lg; 
totPwrG_preS_bt = totPwrG_postPT_1_beta; 
totPwrG_preS_th = totPwrG_postPT_1_theta; clearvars -REGEXP totPwrG_postPT_*

totPwrG_stm1_hg = totPwrG_stim_1_hg; 
totPwrG_stm1_lg = totPwrG_stim_1_lg; 
totPwrG_stm1_bt = totPwrG_stim_1_beta; 
totPwrG_stm1_th = totPwrG_stim_1_theta; clearvars -REGEXP totPwrG_stim_1_*

totPwrG_stm3_hg = totPwrG_stim_3_hg; 
totPwrG_stm3_lg = totPwrG_stim_3_lg; 
totPwrG_stm3_bt = totPwrG_stim_3_beta; 
totPwrG_stm3_th = totPwrG_stim_3_theta; clearvars -REGEXP totPwrG_stim_3_*

totPwrG_stm5_hg = totPwrG_stim_5_hg; 
totPwrG_stm5_lg = totPwrG_stim_5_lg; 
totPwrG_stm5_bt = totPwrG_stim_5_beta; 
totPwrG_stm5_th = totPwrG_stim_5_theta; clearvars -REGEXP totPwrG_stim_5_*

totPwrG_post_hg = totPwrG_postStim_hg; 
totPwrG_post_lg = totPwrG_postStim_lg; 
totPwrG_post_bt = totPwrG_postStim_beta; 
totPwrG_post_th = totPwrG_postStim_theta; clearvars -REGEXP totPwrG_postStim_*

%% 5. Make Figure of High Gamma Heat Maps for Time Points

% set color axis limits
maxD_hg = max([totPwrD_base_hg totPwrD_preS_hg ...
    totPwrD_stm3_hg totPwrD_stm5_hg]);
minD_hg = min([totPwrD_base_hg totPwrD_preS_hg ...
    totPwrD_stm3_hg totPwrD_stm5_hg]);
DLims_hg = [minD_hg maxD_hg];

maxE_hg = max([totPwrE_base_hg totPwrE_preS_hg totPwrE_stm1_hg ...
    totPwrE_stm3_hg totPwrE_stm5_hg totPwrE_post_hg]);
minE_hg = min([totPwrE_base_hg totPwrE_preS_hg totPwrE_stm1_hg ...
    totPwrE_stm3_hg totPwrE_stm5_hg totPwrE_post_hg]);
ELims_hg = [minE_hg maxE_hg];

maxF_hg = max([totPwrF_base_hg totPwrF_preS_hg totPwrF_stm1_hg ...
    totPwrF_stm3_hg totPwrF_stm5_hg totPwrF_post_hg]);
minF_hg = min([totPwrF_base_hg totPwrF_preS_hg totPwrF_stm1_hg ...
    totPwrF_stm3_hg totPwrF_stm5_hg totPwrF_post_hg]);
FLims_hg = [minF_hg maxF_hg];

maxG_hg = max([totPwrG_base_hg totPwrG_preS_hg totPwrG_stm1_hg ...
    totPwrG_stm3_hg totPwrG_stm5_hg totPwrG_post_hg]);
minG_hg = min([totPwrG_base_hg totPwrG_preS_hg totPwrG_stm1_hg ...
    totPwrG_stm3_hg totPwrG_stm5_hg totPwrG_post_hg]);
GLims_hg = [minG_hg maxG_hg];

xpos = linspace(.02,1-.19,6); ypos = [.75 .55 .35 .15]; w = .15; h = w;

% High Gamma Heat Maps
figure('color','w','units','normalize','outerposition',[0 0 1 1])
subplot('position',[xpos(1) ypos(1) w h]), ...
    mapStimArray(totPwrD_base_hg(goodChansD),'','',goodChansD), ...
    caxis(DLims_hg), ...
    ylabel({'Monkey D', '(No Stim)'}), ...
    title('Baseline')
subplot('position',[xpos(2) ypos(1) w h]), ...
    mapStimArray(totPwrD_preS_hg(goodChansD),'','',goodChansD), ...
    caxis(DLims_hg), ...
    title('Pre-Stim'), ...
    axis off
subplot('position',[xpos(3) ypos(1) w h]), ...
%     mapStimArray(totPwrD_stm1_hg(goodChansD),'','',goodChansD), ...
%     caxis(DLims_hg), ...
    title('10 min Stim'), ...
    axis off
subplot('position',[xpos(4) ypos(1) w h]), ...
    mapStimArray(totPwrD_stm3_hg(goodChansD),'','',goodChansD), ...
    caxis(DLims_hg), ...
    title('30 min Stim'), ...
    axis off
subplot('position',[xpos(5) ypos(1) w h]), ...
    mapStimArray(totPwrD_stm5_hg(goodChansD),'','',goodChansD), ...
    caxis(DLims_hg), ...
    title('50 min Stim'), ...
    axis off
subplot('position',[xpos(6) ypos(1) w h]), ...
%     mapStimArray(totPwrD_post_hg(goodChansD),'','',goodChansD), ...
    caxis(DLims_hg), ...
    title('Post-Stim'), ...
    axis off
cbarset(xpos(6),ypos(1),w,h)

subplot('position',[xpos(1) ypos(2) w h]), ...
    mapStimArray(totPwrE_base_hg(goodChansE),'','',goodChansE), ...
    caxis(ELims_hg), ...
    ylabel({'Monkey E', '(No Stim)'})
subplot('position',[xpos(2) ypos(2) w h]), ...
    mapStimArray(totPwrE_preS_hg(goodChansE),'','',goodChansE), ...
    caxis(ELims_hg), ...
    axis off
subplot('position',[xpos(3) ypos(2) w h]), ...
    mapStimArray(totPwrE_stm1_hg(goodChansE),'','',goodChansE), ...
    caxis(ELims_hg), ...
    axis off
subplot('position',[xpos(4) ypos(2) w h]), ...
    mapStimArray(totPwrE_stm3_hg(goodChansE),'','',goodChansE), ...
    caxis(ELims_hg), ...
    axis off
subplot('position',[xpos(5) ypos(2) w h]), ...
    mapStimArray(totPwrE_stm5_hg(goodChansE),'','',goodChansE), ...
    caxis(ELims_hg), ...
    axis off
subplot('position',[xpos(6) ypos(2) w h]), ...
    mapStimArray(totPwrE_post_hg(goodChansE),'','',goodChansE), ...
    caxis(ELims_hg), ...
    axis off
cbarset(xpos(6),ypos(2),w,h)

subplot('position',[xpos(1) ypos(3) w h]), ...
    mapStimArray(totPwrF_base_hg(goodChansF),'','',goodChansF), ...
    caxis(FLims_hg), ...
    ylabel({'Monkey F', '(Stim)'})
subplot('position',[xpos(2) ypos(3) w h]), ...
    mapStimArray(totPwrF_preS_hg(goodChansF),'','',goodChansF), ...
    caxis(FLims_hg), ...
    axis off
subplot('position',[xpos(3) ypos(3) w h]), ...
    mapStimArray(totPwrF_stm1_hg(goodChansF),'','',goodChansF), ...
    caxis(FLims_hg), ...
    axis off
subplot('position',[xpos(4) ypos(3) w h]), ...
    mapStimArray(totPwrF_stm3_hg(goodChansF),'','',goodChansF), ...
    caxis(FLims_hg), ...
    axis off
subplot('position',[xpos(5) ypos(3) w h]), ...
    mapStimArray(totPwrF_stm5_hg(goodChansF),'','',goodChansF), ...
    caxis(FLims_hg), ...
    axis off
subplot('position',[xpos(6) ypos(3) w h]), ...
    mapStimArray(totPwrF_post_hg(goodChansF),'','',goodChansF), ...
    caxis(FLims_hg), ...
    axis off
cbarset(xpos(6),ypos(3),w,h)

subplot('position',[xpos(1) ypos(4) w h]), ...
    mapStimArray(totPwrG_base_hg(goodChansG),'','',goodChansG), ...
    caxis(GLims_hg), ...
    ylabel({'Monkey G', '(Stim)'})
subplot('position',[xpos(2) ypos(4) w h]), ...
    mapStimArray(totPwrG_preS_hg(goodChansG),'','',goodChansG), ...
    caxis(GLims_hg), ...
    axis off
subplot('position',[xpos(3) ypos(4) w h]), ...
    mapStimArray(totPwrG_stm1_hg(goodChansG),'','',goodChansG), ...
    caxis(GLims_hg), ...
    axis off
subplot('position',[xpos(4) ypos(4) w h]), ...
    mapStimArray(totPwrG_stm3_hg(goodChansG),'','',goodChansG), ...
    caxis(GLims_hg), ...
    axis off
subplot('position',[xpos(5) ypos(4) w h]), ...
    mapStimArray(totPwrG_stm5_hg(goodChansG),'','',goodChansG), ...
    caxis(GLims_hg), ...
    axis off
subplot('position',[xpos(6) ypos(4) w h]), ...
    mapStimArray(totPwrG_post_hg(goodChansG),'','',goodChansG), ...
    caxis(GLims_hg), ...
    axis off
cbarset(xpos(6),ypos(4),w,h)

[~,ht] = suplabel('High Gamma Power','t',[.08 .1 .84 .84]);

%% 6. Make Figure of Low Gamma Heat Maps for Time Points

maxD_lg = max([totPwrD_base_lg totPwrD_preS_lg ...
    totPwrD_stm3_lg totPwrD_stm5_lg]);
minD_lg = min([totPwrD_base_lg totPwrD_preS_lg ...
    totPwrD_stm3_lg totPwrD_stm5_lg]);
DLims_lg = [minD_lg maxD_lg];

maxE_lg = max([totPwrE_base_lg totPwrE_preS_lg totPwrE_stm1_lg ...
    totPwrE_stm3_lg totPwrE_stm5_lg totPwrE_post_lg]);
minE_lg = min([totPwrE_base_lg totPwrE_preS_lg totPwrE_stm1_lg ...
    totPwrE_stm3_lg totPwrE_stm5_lg totPwrE_post_lg]);
ELims_lg = [minE_lg maxE_lg];

maxF_lg = max([totPwrF_base_lg totPwrF_preS_lg totPwrF_stm1_lg ...
    totPwrF_stm3_lg totPwrF_stm5_lg totPwrF_post_lg]);
minF_lg = min([totPwrF_base_lg totPwrF_preS_lg totPwrF_stm1_lg ...
    totPwrF_stm3_lg totPwrF_stm5_lg totPwrF_post_lg]);
FLims_lg = [minF_lg maxF_lg];

maxG_lg = max([totPwrG_base_lg totPwrG_preS_lg totPwrG_stm1_lg ...
    totPwrG_stm3_lg totPwrG_stm5_lg totPwrG_post_lg]);
minG_lg = min([totPwrG_base_lg totPwrG_preS_lg totPwrG_stm1_lg ...
    totPwrG_stm3_lg totPwrG_stm5_lg totPwrG_post_lg]);
GLims_lg = [minG_lg maxG_lg];

% Low Gamma Heat Maps
figure('color','w','units','normalize','outerposition',[0 0 1 1])
subplot('position',[xpos(1) ypos(1) w h]), ...
    mapStimArray(totPwrD_base_lg(goodChansD),'','',goodChansD), ...
    caxis(DLims_lg), ...
    ylabel({'Monkey D', '(No Stim)'}), ...
    title('Baseline')
subplot('position',[xpos(2) ypos(1) w h]), ...
    mapStimArray(totPwrD_preS_lg(goodChansD),'','',goodChansD), ...
    caxis(DLims_lg), ...
    title('Pre-Stim'), ...
    axis off
subplot('position',[xpos(3) ypos(1) w h]), ...
%     mapStimArray(totPwrD_stm1_lg(goodChansD),'','',goodChansD), ...
%     caxis(DLims_lg), ...
    title('10 min Stim'), ...
    axis off
subplot('position',[xpos(4) ypos(1) w h]), ...
    mapStimArray(totPwrD_stm3_lg(goodChansD),'','',goodChansD), ...
    caxis(DLims_lg), ...
    title('30 min Stim'), ...
    axis off
subplot('position',[xpos(5) ypos(1) w h]), ...
    mapStimArray(totPwrD_stm5_lg(goodChansD),'','',goodChansD), ...
    caxis(DLims_lg), ...
    title('50 min Stim'), ...
    axis off
subplot('position',[xpos(6) ypos(1) w h]), ...
%     mapStimArray(totPwrD_post_lg(goodChansD),'','',goodChansD), ...
    caxis(DLims_lg), ...
    title('Post-Stim'), ...
    axis off
cbarset(xpos(6),ypos(1),w,h)

subplot('position',[xpos(1) ypos(2) w h]), ...
    mapStimArray(totPwrE_base_lg(goodChansE),'','',goodChansE), ...
    caxis(ELims_lg), ...
    ylabel({'Monkey E', '(No Stim)'})
subplot('position',[xpos(2) ypos(2) w h]), ...
    mapStimArray(totPwrE_preS_lg(goodChansE),'','',goodChansE), ...
    caxis(ELims_lg), ...
    axis off
subplot('position',[xpos(3) ypos(2) w h]), ...
    mapStimArray(totPwrE_stm1_lg(goodChansE),'','',goodChansE), ...
    caxis(ELims_lg), ...
    axis off
subplot('position',[xpos(4) ypos(2) w h]), ...
    mapStimArray(totPwrE_stm3_lg(goodChansE),'','',goodChansE), ...
    caxis(ELims_lg), ...
    axis off
subplot('position',[xpos(5) ypos(2) w h]), ...
    mapStimArray(totPwrE_stm5_lg(goodChansE),'','',goodChansE), ...
    caxis(ELims_lg), ...
    axis off
subplot('position',[xpos(6) ypos(2) w h]), ...
    mapStimArray(totPwrE_post_lg(goodChansE),'','',goodChansE), ...
    caxis(ELims_lg), ...
    axis off
cbarset(xpos(6),ypos(2),w,h)

subplot('position',[xpos(1) ypos(3) w h]), ...
    mapStimArray(totPwrF_base_lg(goodChansF),'','',goodChansF), ...
    caxis(FLims_lg), ...
    ylabel({'Monkey F', '(Stim)'})
subplot('position',[xpos(2) ypos(3) w h]), ...
    mapStimArray(totPwrF_preS_lg(goodChansF),'','',goodChansF), ...
    caxis(FLims_lg), ...
    axis off
subplot('position',[xpos(3) ypos(3) w h]), ...
    mapStimArray(totPwrF_stm1_lg(goodChansF),'','',goodChansF), ...
    caxis(FLims_lg), ...
    axis off
subplot('position',[xpos(4) ypos(3) w h]), ...
    mapStimArray(totPwrF_stm3_lg(goodChansF),'','',goodChansF), ...
    caxis(FLims_lg), ...
    axis off
subplot('position',[xpos(5) ypos(3) w h]), ...
    mapStimArray(totPwrF_stm5_lg(goodChansF),'','',goodChansF), ...
    caxis(FLims_lg), ...
    axis off
subplot('position',[xpos(6) ypos(3) w h]), ...
    mapStimArray(totPwrF_post_lg(goodChansF),'','',goodChansF), ...
    caxis(FLims_lg), ...
    axis off
cbarset(xpos(6),ypos(3),w,h)

subplot('position',[xpos(1) ypos(4) w h]), ...
    mapStimArray(totPwrG_base_lg(goodChansG),'','',goodChansG), ...
    caxis(GLims_lg), ...
    ylabel({'Monkey G', '(Stim)'})
subplot('position',[xpos(2) ypos(4) w h]), ...
    mapStimArray(totPwrG_preS_lg(goodChansG),'','',goodChansG), ...
    caxis(GLims_lg), ...
    axis off
subplot('position',[xpos(3) ypos(4) w h]), ...
    mapStimArray(totPwrG_stm1_lg(goodChansG),'','',goodChansG), ...
    caxis(GLims_lg), ...
    axis off
subplot('position',[xpos(4) ypos(4) w h]), ...
    mapStimArray(totPwrG_stm3_lg(goodChansG),'','',goodChansG), ...
    caxis(GLims_lg), ...
    axis off
subplot('position',[xpos(5) ypos(4) w h]), ...
    mapStimArray(totPwrG_stm5_lg(goodChansG),'','',goodChansG), ...
    caxis(GLims_lg), ...
    axis off
subplot('position',[xpos(6) ypos(4) w h]), ...
    mapStimArray(totPwrG_post_lg(goodChansG),'','',goodChansG), ...
    caxis(GLims_lg), ...
    axis off
cbarset(xpos(6),ypos(4),w,h)

[~,ht] = suplabel('Low Gamma Power','t',[.08 .1 .84 .84]);

%% 7. Make Figure of Beta Heat Maps for Time Points

maxD_bt = max([totPwrD_base_bt totPwrD_preS_bt ...
    totPwrD_stm3_bt totPwrD_stm5_bt]);
minD_bt = min([totPwrD_base_bt totPwrD_preS_bt ...
    totPwrD_stm3_bt totPwrD_stm5_bt]);
DLims_bt = [minD_bt maxD_bt];

maxE_bt = max([totPwrE_base_bt totPwrE_preS_bt totPwrE_stm1_bt ...
    totPwrE_stm3_bt totPwrE_stm5_bt totPwrE_post_bt]);
minE_bt = min([totPwrE_base_bt totPwrE_preS_bt totPwrE_stm1_bt ...
    totPwrE_stm3_bt totPwrE_stm5_bt totPwrE_post_bt]);
ELims_bt = [minE_bt maxE_bt];

maxF_bt = max([totPwrF_base_bt totPwrF_preS_bt totPwrF_stm1_bt ...
    totPwrF_stm3_bt totPwrF_stm5_bt totPwrF_post_bt]);
minF_bt = min([totPwrF_base_bt totPwrF_preS_bt totPwrF_stm1_bt ...
    totPwrF_stm3_bt totPwrF_stm5_bt totPwrF_post_bt]);
FLims_bt = [minF_bt maxF_bt];

maxG_bt = max([totPwrG_base_bt totPwrG_preS_bt totPwrG_stm1_bt ...
    totPwrG_stm3_bt totPwrG_stm5_bt totPwrG_post_bt]);
minG_bt = min([totPwrG_base_bt totPwrG_preS_bt totPwrG_stm1_bt ...
    totPwrG_stm3_bt totPwrG_stm5_bt totPwrG_post_bt]);
GLims_bt = [minG_bt maxG_bt];

% Beta Heat Maps
figure('color','w','units','normalize','outerposition',[0 0 1 1])
subplot('position',[xpos(1) ypos(1) w h]), ...
    mapStimArray(totPwrD_base_bt(goodChansD),'','',goodChansD), ...
    caxis(DLims_bt), ...
    ylabel({'Monkey D', '(No Stim)'}), ...
    title('Baseline')
subplot('position',[xpos(2) ypos(1) w h]), ...
    mapStimArray(totPwrD_preS_bt(goodChansD),'','',goodChansD), ...
    caxis(DLims_bt), ...
    title('Pre-Stim'), ...
    axis off
subplot('position',[xpos(3) ypos(1) w h]), ...
%     mapStimArray(totPwrD_stm1_bt(goodChansD),'','',goodChansD), ...
%     caxis(DLims_bt), ...
    title('10 min Stim'), ...
    axis off
subplot('position',[xpos(4) ypos(1) w h]), ...
    mapStimArray(totPwrD_stm3_bt(goodChansD),'','',goodChansD), ...
    caxis(DLims_bt), ...
    title('30 min Stim'), ...
    axis off
subplot('position',[xpos(5) ypos(1) w h]), ...
    mapStimArray(totPwrD_stm5_bt(goodChansD),'','',goodChansD), ...
    caxis(DLims_bt), ...
    title('50 min Stim'), ...
    axis off
subplot('position',[xpos(6) ypos(1) w h]), ...
%     mapStimArray(totPwrD_post_bt(goodChansD),'','',goodChansD), ...
    caxis(DLims_bt), ...
    title('Post-Stim'), ...
    axis off
cbarset(xpos(6),ypos(1),w,h)

subplot('position',[xpos(1) ypos(2) w h]), ...
    mapStimArray(totPwrE_base_bt(goodChansE),'','',goodChansE), ...
    caxis(ELims_bt), ...
    ylabel({'Monkey E', '(No Stim)'}), ...
    title('Baseline')
subplot('position',[xpos(2) ypos(2) w h]), ...
    mapStimArray(totPwrE_preS_bt(goodChansE),'','',goodChansE), ...
    caxis(ELims_bt), ...
    title('Pre-Stim'), ...
    axis off
subplot('position',[xpos(3) ypos(2) w h]), ...
    mapStimArray(totPwrE_stm1_bt(goodChansE),'','',goodChansE), ...
    caxis(ELims_bt), ...
    title('10 min Stim'), ...
    axis off
subplot('position',[xpos(4) ypos(2) w h]), ...
    mapStimArray(totPwrE_stm3_bt(goodChansE),'','',goodChansE), ...
    caxis(ELims_bt), ...
    title('30 min Stim'), ...
    axis off
subplot('position',[xpos(5) ypos(2) w h]), ...
    mapStimArray(totPwrE_stm5_bt(goodChansE),'','',goodChansE), ...
    caxis(ELims_bt), ...
    title('50 min Stim'), ...
    axis off
subplot('position',[xpos(6) ypos(2) w h]), ...
    mapStimArray(totPwrE_post_bt(goodChansE),'','',goodChansE), ...
    caxis(ELims_bt), ...
    title('Post-Stim'), ...
    axis off
cbarset(xpos(6),ypos(2),w,h)

subplot('position',[xpos(1) ypos(3) w h]), ...
    mapStimArray(totPwrF_base_bt(goodChansF),'','',goodChansF), ...
    caxis(FLims_bt), ...
    ylabel({'Monkey F', '(Stim)'})
subplot('position',[xpos(2) ypos(3) w h]), ...
    mapStimArray(totPwrF_preS_bt(goodChansF),'','',goodChansF), ...
    caxis(FLims_bt), ...
    axis off
subplot('position',[xpos(3) ypos(3) w h]), ...
    mapStimArray(totPwrF_stm1_bt(goodChansF),'','',goodChansF), ...
    caxis(FLims_bt), ...
    axis off
subplot('position',[xpos(4) ypos(3) w h]), ...
    mapStimArray(totPwrF_stm3_bt(goodChansF),'','',goodChansF), ...
    caxis(FLims_bt), ...
    axis off
subplot('position',[xpos(5) ypos(3) w h]), ...
    mapStimArray(totPwrF_stm5_bt(goodChansF),'','',goodChansF), ...
    caxis(FLims_bt), ...
    axis off
subplot('position',[xpos(6) ypos(3) w h]), ...
    mapStimArray(totPwrF_post_bt(goodChansF),'','',goodChansF), ...
    caxis(FLims_bt), ...
    axis off
cbarset(xpos(6),ypos(3),w,h)

subplot('position',[xpos(1) ypos(4) w h]), ...
    mapStimArray(totPwrG_base_bt(goodChansG),'','',goodChansG), ...
    caxis(GLims_bt), ...
    ylabel({'Monkey G', '(Stim)'})
subplot('position',[xpos(2) ypos(4) w h]), ...
    mapStimArray(totPwrG_preS_bt(goodChansG),'','',goodChansG), ...
    caxis(GLims_bt), ...
    axis off
subplot('position',[xpos(3) ypos(4) w h]), ...
    mapStimArray(totPwrG_stm1_bt(goodChansG),'','',goodChansG), ...
    caxis(GLims_bt), ...
    axis off
subplot('position',[xpos(4) ypos(4) w h]), ...
    mapStimArray(totPwrG_stm3_bt(goodChansG),'','',goodChansG), ...
    caxis(GLims_bt), ...
    axis off
subplot('position',[xpos(5) ypos(4) w h]), ...
    mapStimArray(totPwrG_stm5_bt(goodChansG),'','',goodChansG), ...
    caxis(GLims_bt), ...
    axis off
subplot('position',[xpos(6) ypos(4) w h]), ...
    mapStimArray(totPwrG_post_bt(goodChansG),'','',goodChansG), ...
    caxis(GLims_bt), ...
    axis off
cbarset(xpos(6),ypos(4),w,h)

[~,ht] = suplabel('Beta Power','t',[.08 .1 .84 .84]);

%% 8. Make Figure of Theta Heat Maps for Time Points

maxD_th = max([totPwrD_base_th totPwrD_preS_th ...
    totPwrD_stm3_th totPwrD_stm5_th]);
minD_th = min([totPwrD_base_th totPwrD_preS_th ...
    totPwrD_stm3_th totPwrD_stm5_th]);
DLims_th = [minD_th maxD_th];

maxE_th = max([totPwrE_base_th totPwrE_preS_th totPwrE_stm1_th ...
    totPwrE_stm3_th totPwrE_stm5_th totPwrE_post_th]);
minE_th = min([totPwrE_base_th totPwrE_preS_th totPwrE_stm1_th ...
    totPwrE_stm3_th totPwrE_stm5_th totPwrE_post_th]);
ELims_th = [minE_th maxE_th];

maxF_th = max([totPwrF_base_th totPwrF_preS_th totPwrF_stm1_th ...
    totPwrF_stm3_th totPwrF_stm5_th totPwrF_post_th]);
minF_th = min([totPwrF_base_th totPwrF_preS_th totPwrF_stm1_th ...
    totPwrF_stm3_th totPwrF_stm5_th totPwrF_post_th]);
FLims_th = [minF_th maxF_th];

maxG_th = max([totPwrG_base_th totPwrG_preS_th totPwrG_stm1_th ...
    totPwrG_stm3_th totPwrG_stm5_th totPwrG_post_th]);
minG_th = min([totPwrG_base_th totPwrG_preS_th totPwrG_stm1_th ...
    totPwrG_stm3_th totPwrG_stm5_th totPwrG_post_th]);
GLims_th = [minG_th maxG_th];

% Theta Heat Maps
figure('color','w','units','normalize','outerposition',[0 0 1 1])
subplot('position',[xpos(1) ypos(1) w h]), ...
    mapStimArray(totPwrD_base_th(goodChansD),'','',goodChansD), ...
    caxis(DLims_th), ...
    ylabel({'Monkey D', '(No Stim)'}), ...
    title('Baseline')
subplot('position',[xpos(2) ypos(1) w h]), ...
    mapStimArray(totPwrD_preS_th(goodChansD),'','',goodChansD), ...
    caxis(DLims_th), ...
    title('Pre-Stim'), ...
    axis off
subplot('position',[xpos(3) ypos(1) w h]), ...
%     mapStimArray(totPwrD_stm1_th(goodChansD),'','',goodChansD), ...
%     caxis(DLims_th), ...
    title('10 min Stim'), ...
    axis off
subplot('position',[xpos(4) ypos(1) w h]), ...
    mapStimArray(totPwrD_stm3_th(goodChansD),'','',goodChansD), ...
    caxis(DLims_th), ...
    title('30 min Stim'), ...
    axis off
subplot('position',[xpos(5) ypos(1) w h]), ...
    mapStimArray(totPwrD_stm5_th(goodChansD),'','',goodChansD), ...
    caxis(DLims_th), ...
    title('50 min Stim'), ...
    axis off
subplot('position',[xpos(6) ypos(1) w h]), ...
%     mapStimArray(totPwrD_post_th(goodChansD),'','',goodChansD), ...
    caxis(DLims_th), ...
    title('Post-Stim'), ...
    axis off
cbarset(xpos(6),ypos(1),w,h)

subplot('position',[xpos(1) ypos(2) w h]), ...
    mapStimArray(totPwrE_base_th(goodChansE),'','',goodChansE), ...
    caxis(ELims_th), ...
    ylabel({'Monkey E', '(No Stim)'}), ...
    title('Baseline')
subplot('position',[xpos(2) ypos(2) w h]), ...
    mapStimArray(totPwrE_preS_th(goodChansE),'','',goodChansE), ...
    caxis(ELims_th), ...
    title('Pre-Stim'), ...
    axis off
subplot('position',[xpos(3) ypos(2) w h]), ...
    mapStimArray(totPwrE_stm1_th(goodChansE),'','',goodChansE), ...
    caxis(ELims_th), ...
    title('10 min Stim'), ...
    axis off
subplot('position',[xpos(4) ypos(2) w h]), ...
    mapStimArray(totPwrE_stm3_th(goodChansE),'','',goodChansE), ...
    caxis(ELims_th), ...
    title('30 min Stim'), ...
    axis off
subplot('position',[xpos(5) ypos(2) w h]), ...
    mapStimArray(totPwrE_stm5_th(goodChansE),'','',goodChansE), ...
    caxis(ELims_th), ...
    title('50 min Stim'), ...
    axis off
subplot('position',[xpos(6) ypos(2) w h]), ...
    mapStimArray(totPwrE_post_th(goodChansE),'','',goodChansE), ...
    caxis(ELims_th), ...
    title('Post-Stim'), ...
    axis off
cbarset(xpos(6),ypos(2),w,h)

subplot('position',[xpos(1) ypos(3) w h]), ...
    mapStimArray(totPwrF_base_th(goodChansF),'','',goodChansF), ...
    caxis(FLims_th), ...
    ylabel({'Monkey F', '(Stim)'})
subplot('position',[xpos(2) ypos(3) w h]), ...
    mapStimArray(totPwrF_preS_th(goodChansF),'','',goodChansF), ...
    caxis(FLims_th), ...
    axis off
subplot('position',[xpos(3) ypos(3) w h]), ...
    mapStimArray(totPwrF_stm1_th(goodChansF),'','',goodChansF), ...
    caxis(FLims_th), ...
    axis off
subplot('position',[xpos(4) ypos(3) w h]), ...
    mapStimArray(totPwrF_stm3_th(goodChansF),'','',goodChansF), ...
    caxis(FLims_th), ...
    axis off
subplot('position',[xpos(5) ypos(3) w h]), ...
    mapStimArray(totPwrF_stm5_th(goodChansF),'','',goodChansF), ...
    caxis(FLims_th), ...
    axis off
subplot('position',[xpos(6) ypos(3) w h]), ...
    mapStimArray(totPwrF_post_th(goodChansF),'','',goodChansF), ...
    caxis(FLims_th), ...
    axis off
cbarset(xpos(6),ypos(3),w,h)

subplot('position',[xpos(1) ypos(4) w h]), ...
    mapStimArray(totPwrG_base_th(goodChansG),'','',goodChansG), ...
    caxis(GLims_th), ...
    ylabel({'Monkey G', '(Stim)'})
subplot('position',[xpos(2) ypos(4) w h]), ...
    mapStimArray(totPwrG_preS_th(goodChansG),'','',goodChansG), ...
    caxis(GLims_th), ...
    axis off
subplot('position',[xpos(3) ypos(4) w h]), ...
    mapStimArray(totPwrG_stm1_th(goodChansG),'','',goodChansG), ...
    caxis(GLims_th), ...
    axis off
subplot('position',[xpos(4) ypos(4) w h]), ...
    mapStimArray(totPwrG_stm3_th(goodChansG),'','',goodChansG), ...
    caxis(GLims_th), ...
    axis off
subplot('position',[xpos(5) ypos(4) w h]), ...
    mapStimArray(totPwrG_stm5_th(goodChansG),'','',goodChansG), ...
    caxis(GLims_th), ...
    axis off
subplot('position',[xpos(6) ypos(4) w h]), ...
    mapStimArray(totPwrG_post_th(goodChansG),'','',goodChansG), ...
    caxis(GLims_th), ...
    axis off
cbarset(xpos(6),ypos(4),w,h)

[~,ht] = suplabel('Theta Power','t',[.08 .1 .84 .84]);

%% 9. Calculate Change in Power All Bands

subTotPwrD_preS_hg = totPwrD_preS_hg - totPwrD_base_hg;
subTotPwrD_preS_lg = totPwrD_preS_lg - totPwrD_base_lg;
subTotPwrD_preS_bt = totPwrD_preS_bt - totPwrD_base_bt;
subTotPwrD_preS_th = totPwrD_preS_th - totPwrD_base_th;

% subTotPwrD_stm1_hg = totPwrD_stm1_hg - totPwrD_base_hg;
% subTotPwrD_stm1_lg = totPwrD_stm1_lg - totPwrD_base_lg;
% subTotPwrD_stm1_bt = totPwrD_stm1_bt - totPwrD_base_bt;
% subTotPwrD_stm1_th = totPwrD_stm1_th - totPwrD_base_th;

subTotPwrD_stm3_hg = totPwrD_stm3_hg - totPwrD_base_hg;
subTotPwrD_stm3_lg = totPwrD_stm3_lg - totPwrD_base_lg;
subTotPwrD_stm3_bt = totPwrD_stm3_bt - totPwrD_base_bt;
subTotPwrD_stm3_th = totPwrD_stm3_th - totPwrD_base_th;

subTotPwrD_stm5_hg = totPwrD_stm5_hg - totPwrD_base_hg;
subTotPwrD_stm5_lg = totPwrD_stm5_lg - totPwrD_base_lg;
subTotPwrD_stm5_bt = totPwrD_stm5_bt - totPwrD_base_bt;
subTotPwrD_stm5_th = totPwrD_stm5_th - totPwrD_base_th;

% subTotPwrD_post_hg = totPwrD_post_hg - totPwrD_base_hg;
% subTotPwrD_post_lg = totPwrD_post_lg - totPwrD_base_lg;
% subTotPwrD_post_bt = totPwrD_post_bt - totPwrD_base_bt;
% subTotPwrD_post_th = totPwrD_post_th - totPwrD_base_th;


subTotPwrE_preS_hg = totPwrE_preS_hg - totPwrE_base_hg;
subTotPwrE_preS_lg = totPwrE_preS_lg - totPwrE_base_lg;
subTotPwrE_preS_bt = totPwrE_preS_bt - totPwrE_base_bt;
subTotPwrE_preS_th = totPwrE_preS_th - totPwrE_base_th;

subTotPwrE_stm1_hg = totPwrE_stm1_hg - totPwrE_base_hg;
subTotPwrE_stm1_lg = totPwrE_stm1_lg - totPwrE_base_lg;
subTotPwrE_stm1_bt = totPwrE_stm1_bt - totPwrE_base_bt;
subTotPwrE_stm1_th = totPwrE_stm1_th - totPwrE_base_th;

subTotPwrE_stm3_hg = totPwrE_stm3_hg - totPwrE_base_hg;
subTotPwrE_stm3_lg = totPwrE_stm3_lg - totPwrE_base_lg;
subTotPwrE_stm3_bt = totPwrE_stm3_bt - totPwrE_base_bt;
subTotPwrE_stm3_th = totPwrE_stm3_th - totPwrE_base_th;

subTotPwrE_stm5_hg = totPwrE_stm5_hg - totPwrE_base_hg;
subTotPwrE_stm5_lg = totPwrE_stm5_lg - totPwrE_base_lg;
subTotPwrE_stm5_bt = totPwrE_stm5_bt - totPwrE_base_bt;
subTotPwrE_stm5_th = totPwrE_stm5_th - totPwrE_base_th;

subTotPwrE_post_hg = totPwrE_post_hg - totPwrE_base_hg;
subTotPwrE_post_lg = totPwrE_post_lg - totPwrE_base_lg;
subTotPwrE_post_bt = totPwrE_post_bt - totPwrE_base_bt;
subTotPwrE_post_th = totPwrE_post_th - totPwrE_base_th;


subTotPwrF_preS_hg = totPwrF_preS_hg - totPwrF_base_hg;
subTotPwrF_preS_lg = totPwrF_preS_lg - totPwrF_base_lg;
subTotPwrF_preS_bt = totPwrF_preS_bt - totPwrF_base_bt;
subTotPwrF_preS_th = totPwrF_preS_th - totPwrF_base_th;

subTotPwrF_stm1_hg = totPwrF_stm1_hg - totPwrF_base_hg;
subTotPwrF_stm1_lg = totPwrF_stm1_lg - totPwrF_base_lg;
subTotPwrF_stm1_bt = totPwrF_stm1_bt - totPwrF_base_bt;
subTotPwrF_stm1_th = totPwrF_stm1_th - totPwrF_base_th;

subTotPwrF_stm3_hg = totPwrF_stm3_hg - totPwrF_base_hg;
subTotPwrF_stm3_lg = totPwrF_stm3_lg - totPwrF_base_lg;
subTotPwrF_stm3_bt = totPwrF_stm3_bt - totPwrF_base_bt;
subTotPwrF_stm3_th = totPwrF_stm3_th - totPwrF_base_th;

subTotPwrF_stm5_hg = totPwrF_stm5_hg - totPwrF_base_hg;
subTotPwrF_stm5_lg = totPwrF_stm5_lg - totPwrF_base_lg;
subTotPwrF_stm5_bt = totPwrF_stm5_bt - totPwrF_base_bt;
subTotPwrF_stm5_th = totPwrF_stm5_th - totPwrF_base_th;

subTotPwrF_post_hg = totPwrF_post_hg - totPwrF_base_hg;
subTotPwrF_post_lg = totPwrF_post_lg - totPwrF_base_lg;
subTotPwrF_post_bt = totPwrF_post_bt - totPwrF_base_bt;
subTotPwrF_post_th = totPwrF_post_th - totPwrF_base_th;


subTotPwrG_preS_hg = totPwrG_preS_hg - totPwrG_base_hg;
subTotPwrG_preS_lg = totPwrG_preS_lg - totPwrG_base_lg;
subTotPwrG_preS_bt = totPwrG_preS_bt - totPwrG_base_bt;
subTotPwrG_preS_th = totPwrG_preS_th - totPwrG_base_th;

subTotPwrG_stm1_hg = totPwrG_stm1_hg - totPwrG_base_hg;
subTotPwrG_stm1_lg = totPwrG_stm1_lg - totPwrG_base_lg;
subTotPwrG_stm1_bt = totPwrG_stm1_bt - totPwrG_base_bt;
subTotPwrG_stm1_th = totPwrG_stm1_th - totPwrG_base_th;

subTotPwrG_stm3_hg = totPwrG_stm3_hg - totPwrG_base_hg;
subTotPwrG_stm3_lg = totPwrG_stm3_lg - totPwrG_base_lg;
subTotPwrG_stm3_bt = totPwrG_stm3_bt - totPwrG_base_bt;
subTotPwrG_stm3_th = totPwrG_stm3_th - totPwrG_base_th;

subTotPwrG_stm5_hg = totPwrG_stm5_hg - totPwrG_base_hg;
subTotPwrG_stm5_lg = totPwrG_stm5_lg - totPwrG_base_lg;
subTotPwrG_stm5_bt = totPwrG_stm5_bt - totPwrG_base_bt;
subTotPwrG_stm5_th = totPwrG_stm5_th - totPwrG_base_th;

subTotPwrG_post_hg = totPwrG_post_hg - totPwrG_base_hg;
subTotPwrG_post_lg = totPwrG_post_lg - totPwrG_base_lg;
subTotPwrG_post_bt = totPwrG_post_bt - totPwrG_base_bt;
subTotPwrG_post_th = totPwrG_post_th - totPwrG_base_th;

%% 10. Show Change in Power Heat Maps - High Gamma

% set color axis limits
subMaxD_hg = max([subTotPwrD_preS_hg ...
    subTotPwrD_stm3_hg subTotPwrD_stm5_hg]);
subMinD_hg = min([subTotPwrD_preS_hg ...
    subTotPwrD_stm3_hg subTotPwrD_stm5_hg]);
subDLims_hg = [subMinD_hg subMaxD_hg];
subDLims_hg = [-max(abs(subDLims_hg)) max(abs(subDLims_hg))];

subMaxE_hg = max([subTotPwrE_preS_hg subTotPwrE_stm1_hg ...
    subTotPwrE_stm3_hg subTotPwrE_stm5_hg subTotPwrE_post_hg]);
subMinE_hg = min([subTotPwrE_preS_hg subTotPwrE_stm1_hg ...
    subTotPwrE_stm3_hg subTotPwrE_stm5_hg subTotPwrE_post_hg]);
subELims_hg = [subMinE_hg subMaxE_hg];
subELims_hg = [-max(abs(subELims_hg)) max(abs(subELims_hg))];

subMaxF_hg = max([subTotPwrF_preS_hg subTotPwrF_stm1_hg ...
    subTotPwrF_stm3_hg subTotPwrF_stm5_hg subTotPwrF_post_hg]);
subMinF_hg = min([subTotPwrF_preS_hg subTotPwrF_stm1_hg ...
    subTotPwrF_stm3_hg subTotPwrF_stm5_hg subTotPwrF_post_hg]);
subFLims_hg = [subMinF_hg subMaxF_hg];
subFLims_hg = [-max(abs(subFLims_hg)) max(abs(subFLims_hg))];

subMaxG_hg = max([subTotPwrG_preS_hg subTotPwrG_stm1_hg ...
    subTotPwrG_stm3_hg subTotPwrG_stm5_hg subTotPwrG_post_hg]);
subMinG_hg = min([subTotPwrG_preS_hg subTotPwrG_stm1_hg ...
    subTotPwrG_stm3_hg subTotPwrG_stm5_hg subTotPwrG_post_hg]);
subGLims_hg = [subMinG_hg subMaxG_hg];
subGLims_hg = [-max(abs(subGLims_hg)) max(abs(subGLims_hg))];

xpos = linspace(.02,1-.26,5); ypos = [.7 .5 .3 .1]; w = .18; h = w;

% High Gamma Heat Maps
figure('color','w','units','normalize','outerposition',[0 0 1 1])
subplot('position',[xpos(1) ypos(1) w h]), ...
    mapStimArray(subTotPwrD_preS_hg(goodChansD),'','',goodChansD), ...
    caxis(subDLims_hg), ...
    ylabel({'Monkey D', '(No Stim)'}), ...
    title('Pre-Stim')
subplot('position',[xpos(2) ypos(1) w h]), ...
%     mapStimArray(subTotPwrD_stm1_hg(goodChansD),'','',goodChansD), ...
    caxis(subDLims_hg), ...
    title('10 min Stim'), ...
    axis off
subplot('position',[xpos(3) ypos(1) w h]), ...
    mapStimArray(subTotPwrD_stm3_hg(goodChansD),'','',goodChansD), ...
    caxis(subDLims_hg), ...
    title('30 min Stim'), ...
    axis off
subplot('position',[xpos(4) ypos(1) w h]), ...
    mapStimArray(subTotPwrD_stm5_hg(goodChansD),'','',goodChansD), ...
    caxis(subDLims_hg), ...
    title('50 min Stim'), ...
    axis off
subplot('position',[xpos(5) ypos(1) w h]), ...
%     mapStimArray(subTotPwrD_post_hg(goodChansD),'','',goodChansD), ...
    caxis(subDLims_hg), ...
    title('Post-Stim'), ...
    axis off
cbarset(xpos(5),ypos(1),w,h)

subplot('position',[xpos(1) ypos(2) w h]), ...
    mapStimArray(subTotPwrE_preS_hg(goodChansE),'','',goodChansE), ...
    caxis(subELims_hg), ...
    ylabel({'Monkey E', '(No Stim)'})
subplot('position',[xpos(2) ypos(2) w h]), ...
    mapStimArray(subTotPwrE_stm1_hg(goodChansE),'','',goodChansE), ...
    caxis(subELims_hg), ...
    axis off
subplot('position',[xpos(3) ypos(2) w h]), ...
    mapStimArray(subTotPwrE_stm3_hg(goodChansE),'','',goodChansE), ...
    caxis(subELims_hg), ...
    axis off
subplot('position',[xpos(4) ypos(2) w h]), ...
    mapStimArray(subTotPwrE_stm5_hg(goodChansE),'','',goodChansE), ...
    caxis(subELims_hg), ...
    axis off
subplot('position',[xpos(5) ypos(2) w h]), ...
    mapStimArray(subTotPwrE_post_hg(goodChansE),'','',goodChansE), ...
    caxis(subELims_hg), ...
    axis off
cbarset(xpos(5),ypos(2),w,h)

subplot('position',[xpos(1) ypos(3) w h]), ...
    mapStimArray(subTotPwrF_preS_hg(goodChansF),'','',goodChansF), ...
    caxis(subFLims_hg), ...
    ylabel({'Monkey F', '(Stim)'})
subplot('position',[xpos(2) ypos(3) w h]), ...
    mapStimArray(subTotPwrF_stm1_hg(goodChansF),'','',goodChansF), ...
    caxis(subFLims_hg), ...
    axis off
subplot('position',[xpos(3) ypos(3) w h]), ...
    mapStimArray(subTotPwrF_stm3_hg(goodChansF),'','',goodChansF), ...
    caxis(subFLims_hg), ...
    axis off
subplot('position',[xpos(4) ypos(3) w h]), ...
    mapStimArray(subTotPwrF_stm5_hg(goodChansF),'','',goodChansF), ...
    caxis(subFLims_hg), ...
    axis off
subplot('position',[xpos(5) ypos(3) w h]), ...
    mapStimArray(subTotPwrF_post_hg(goodChansF),'','',goodChansF), ...
    caxis(subFLims_hg), ...
    axis off
cbarset(xpos(5),ypos(3),w,h)

subplot('position',[xpos(1) ypos(4) w h]), ...
    mapStimArray(subTotPwrG_preS_hg(goodChansG),'','',goodChansG), ...
    caxis(subGLims_hg), ...
    ylabel({'Monkey G', '(Stim)'})
subplot('position',[xpos(2) ypos(4) w h]), ...
    mapStimArray(subTotPwrG_stm1_hg(goodChansG),'','',goodChansG), ...
    caxis(subGLims_hg), ...
    axis off
subplot('position',[xpos(3) ypos(4) w h]), ...
    mapStimArray(subTotPwrG_stm3_hg(goodChansG),'','',goodChansG), ...
    caxis(subGLims_hg), ...
    axis off
subplot('position',[xpos(4) ypos(4) w h]), ...
    mapStimArray(subTotPwrG_stm5_hg(goodChansG),'','',goodChansG), ...
    caxis(subGLims_hg), ...
    axis off
subplot('position',[xpos(5) ypos(4) w h]), ...
    mapStimArray(subTotPwrG_post_hg(goodChansG),'','',goodChansG), ...
    caxis(subGLims_hg), ...
    axis off
cbarset(xpos(5),ypos(4),w,h)

[~,ht] = suplabel('Change in High Gamma Power','t',[.08 .1 .84 .84]);

% print -dpdf -painters HighGammaChangeHeatMaps
%% 11. Show Change in Power Heat Maps - Low Gamma

% set color axis limits
subMaxD_lg = max([subTotPwrD_preS_lg ...
    subTotPwrD_stm3_lg subTotPwrD_stm5_lg]);
subMinD_lg = min([subTotPwrD_preS_lg ...
    subTotPwrD_stm3_lg subTotPwrD_stm5_lg]);
subDLims_lg = [subMinD_lg subMaxD_lg];
subDLims_hg = [-max(abs(subDLims_lg)) max(abs(subDLims_lg))];

subMaxE_lg = max([subTotPwrE_preS_lg subTotPwrE_stm1_lg ...
    subTotPwrE_stm3_lg subTotPwrE_stm5_lg subTotPwrE_post_lg]);
subMinE_lg = min([subTotPwrE_preS_lg subTotPwrE_stm1_lg ...
    subTotPwrE_stm3_lg subTotPwrE_stm5_lg subTotPwrE_post_lg]);
subELims_lg = [subMinE_lg subMaxE_lg];
subELims_lg = [-max(abs(subELims_lg)) max(abs(subELims_lg))];

subMaxF_lg = max([subTotPwrF_preS_lg subTotPwrF_stm1_lg ...
    subTotPwrF_stm3_lg subTotPwrF_stm5_lg subTotPwrF_post_lg]);
subMinF_lg = min([subTotPwrF_preS_lg subTotPwrF_stm1_lg ...
    subTotPwrF_stm3_lg subTotPwrF_stm5_lg subTotPwrF_post_lg]);
subFLims_lg = [subMinF_lg subMaxF_lg];
subFLims_lg = [-max(abs(subFLims_lg)) max(abs(subFLims_lg))];

subMaxG_lg = max([subTotPwrG_preS_lg subTotPwrG_stm1_lg ...
    subTotPwrG_stm3_lg subTotPwrG_stm5_lg subTotPwrG_post_lg]);
subMinG_lg = min([subTotPwrG_preS_lg subTotPwrG_stm1_lg ...
    subTotPwrG_stm3_lg subTotPwrG_stm5_lg subTotPwrG_post_lg]);
subGLims_lg = [subMinG_lg subMaxG_lg];
subGLims_lg = [-max(abs(subGLims_lg)) max(abs(subGLims_lg))];
subGLims_lg = [-4e5 4e5];

xpos = linspace(.02,1-.26,5); ypos = [.7 .5 .3 .1]; w = .18; h = w;

% Low Gamma Heat Maps
figure('color','w','units','normalize','outerposition',[0 0 1 1])
subplot('position',[xpos(1) ypos(1) w h]), ...
    mapStimArray(subTotPwrD_preS_lg(goodChansD),'','',goodChansD), ...
    caxis(subDLims_lg), ...
    ylabel({'Monkey D', '(No Stim)'}), ...
    title('Pre-Stim')
subplot('position',[xpos(2) ypos(1) w h]), ...
%     mapStimArray(subTotPwrD_stm1_lg(goodChansD),'','',goodChansD), ...
    caxis(subDLims_lg), ...
    title('10 min Stim'), ...
    axis off
subplot('position',[xpos(3) ypos(1) w h]), ...
    mapStimArray(subTotPwrD_stm3_lg(goodChansD),'','',goodChansD), ...
    caxis(subDLims_lg), ...
    title('30 min Stim'), ...
    axis off
subplot('position',[xpos(4) ypos(1) w h]), ...
    mapStimArray(subTotPwrD_stm5_lg(goodChansD),'','',goodChansD), ...
    caxis(subDLims_lg), ...
    title('50 min Stim'), ...
    axis off
subplot('position',[xpos(5) ypos(1) w h]), ...
%     mapStimArray(subTotPwrD_post_lg(goodChansD),'','',goodChansD), ...
    caxis(subDLims_lg), ...
    title('Post-Stim'), ...
    axis off
cbarset(xpos(5),ypos(1),w,h)

subplot('position',[xpos(1) ypos(2) w h]), ...
    mapStimArray(subTotPwrE_preS_lg(goodChansE),'','',goodChansE), ...
    caxis(subELims_lg), ...
    ylabel({'Monkey E', '(No Stim)'})
subplot('position',[xpos(2) ypos(2) w h]), ...
    mapStimArray(subTotPwrE_stm1_lg(goodChansE),'','',goodChansE), ...
    caxis(subELims_lg), ...
    axis off
subplot('position',[xpos(3) ypos(2) w h]), ...
    mapStimArray(subTotPwrE_stm3_lg(goodChansE),'','',goodChansE), ...
    caxis(subELims_lg), ...
    axis off
subplot('position',[xpos(4) ypos(2) w h]), ...
    mapStimArray(subTotPwrE_stm5_lg(goodChansE),'','',goodChansE), ...
    caxis(subELims_lg), ...
    axis off
subplot('position',[xpos(5) ypos(2) w h]), ...
    mapStimArray(subTotPwrE_post_lg(goodChansE),'','',goodChansE), ...
    caxis(subELims_lg), ...
    axis off
cbarset(xpos(5),ypos(2),w,h)

subplot('position',[xpos(1) ypos(3) w h]), ...
    mapStimArray(subTotPwrF_preS_lg(goodChansF),'','',goodChansF), ...
    caxis(subFLims_lg), ...
    ylabel({'Monkey F', '(Stim)'})
subplot('position',[xpos(2) ypos(3) w h]), ...
    mapStimArray(subTotPwrF_stm1_lg(goodChansF),'','',goodChansF), ...
    caxis(subFLims_lg), ...
    axis off
subplot('position',[xpos(3) ypos(3) w h]), ...
    mapStimArray(subTotPwrF_stm3_lg(goodChansF),'','',goodChansF), ...
    caxis(subFLims_lg), ...
    axis off
subplot('position',[xpos(4) ypos(3) w h]), ...
    mapStimArray(subTotPwrF_stm5_lg(goodChansF),'','',goodChansF), ...
    caxis(subFLims_lg), ...
    axis off
subplot('position',[xpos(5) ypos(3) w h]), ...
    mapStimArray(subTotPwrF_post_lg(goodChansF),'','',goodChansF), ...
    caxis(subFLims_lg), ...
    axis off
cbarset(xpos(5),ypos(3),w,h)

subplot('position',[xpos(1) ypos(4) w h]), ...
    mapStimArray(subTotPwrG_preS_lg(goodChansG),'','',goodChansG), ...
    caxis(subGLims_lg), ...
    ylabel({'Monkey G', '(Stim)'})
subplot('position',[xpos(2) ypos(4) w h]), ...
    mapStimArray(subTotPwrG_stm1_lg(goodChansG),'','',goodChansG), ...
    caxis(subGLims_lg), ...
    axis off
subplot('position',[xpos(3) ypos(4) w h]), ...
    mapStimArray(subTotPwrG_stm3_lg(goodChansG),'','',goodChansG), ...
    caxis(subGLims_lg), ...
    axis off
subplot('position',[xpos(4) ypos(4) w h]), ...
    mapStimArray(subTotPwrG_stm5_lg(goodChansG),'','',goodChansG), ...
    caxis(subGLims_lg), ...
    axis off
subplot('position',[xpos(5) ypos(4) w h]), ...
    mapStimArray(subTotPwrG_post_lg(goodChansG),'','',goodChansG), ...
    caxis(subGLims_lg), ...
    axis off
cbarset(xpos(5),ypos(4),w,h)

[~,ht] = suplabel('Change in Low Gamma Power','t',[.08 .1 .84 .84]);

% print -dpdf -painters LowGammaChangeHeatMaps
%% 12. Show Change in Power Heat Maps - Beta

% set color axis limits
subMaxD_bt = max([subTotPwrD_preS_bt ...
    subTotPwrD_stm3_bt subTotPwrD_stm5_bt]);
subMinD_bt = min([subTotPwrD_preS_bt ...
    subTotPwrD_stm3_hg subTotPwrD_stm5_bt]);
subDLims_bt = [subMinD_bt subMaxD_bt];
subDLims_bt = [-max(abs(subDLims_bt)) max(abs(subDLims_bt))];

subMaxE_bt = max([subTotPwrE_preS_bt subTotPwrE_stm1_bt ...
    subTotPwrE_stm3_bt subTotPwrE_stm5_bt subTotPwrE_post_bt]);
subMinE_bt = min([subTotPwrE_preS_bt subTotPwrE_stm1_bt ...
    subTotPwrE_stm3_bt subTotPwrE_stm5_bt subTotPwrE_post_bt]);
subELims_bt = [subMinE_bt subMaxE_bt];
subELims_bt = [-max(abs(subELims_bt)) max(abs(subELims_bt))];

subMaxF_bt = max([subTotPwrF_preS_bt subTotPwrF_stm1_bt ...
    subTotPwrF_stm3_bt subTotPwrF_stm5_bt subTotPwrF_post_bt]);
subMinF_bt = min([subTotPwrF_preS_bt subTotPwrF_stm1_bt ...
    subTotPwrF_stm3_bt subTotPwrF_stm5_bt subTotPwrF_post_bt]);
subFLims_bt = [subMinF_bt subMaxF_bt];
subFLims_bt = [-max(abs(subFLims_bt)) max(abs(subFLims_bt))];

subMaxG_bt = max([subTotPwrG_preS_bt subTotPwrG_stm1_bt ...
    subTotPwrG_stm3_bt subTotPwrG_stm5_bt subTotPwrG_post_bt]);
subMinG_bt = min([subTotPwrG_preS_bt subTotPwrG_stm1_bt ...
    subTotPwrG_stm3_bt subTotPwrG_stm5_bt subTotPwrG_post_bt]);
subGLims_bt = [subMinG_bt subMaxG_bt];
subGLims_bt = [-max(abs(subGLims_bt)) max(abs(subGLims_bt))];

xpos = linspace(.02,1-.26,5); ypos = [.7 .5 .3 .1]; w = .18; h = w;

% Beta Heat Maps
figure('color','w','units','normalize','outerposition',[0 0 1 1])
subplot('position',[xpos(1) ypos(1) w h]), ...
    mapStimArray(subTotPwrD_preS_bt(goodChansD),'','',goodChansD), ...
    caxis(subDLims_bt), ...
    ylabel({'Monkey D', '(No Stim)'}), ...
    title('Pre-Stim')
subplot('position',[xpos(2) ypos(1) w h]), ...
%     mapStimArray(subTotPwrD_stm1_bt(goodChansD),'','',goodChansD), ...
    caxis(subDLims_bt), ...
    title('10 min Stim'), ...
    axis off
subplot('position',[xpos(3) ypos(1) w h]), ...
    mapStimArray(subTotPwrD_stm3_bt(goodChansD),'','',goodChansD), ...
    caxis(subDLims_bt), ...
    title('30 min Stim'), ...
    axis off
subplot('position',[xpos(4) ypos(1) w h]), ...
    mapStimArray(subTotPwrD_stm5_bt(goodChansD),'','',goodChansD), ...
    caxis(subDLims_bt), ...
    title('50 min Stim'), ...
    axis off
subplot('position',[xpos(5) ypos(1) w h]), ...
%     mapStimArray(subTotPwrD_post_bt(goodChansD),'','',goodChansD), ...
    caxis(subDLims_bt), ...
    title('Post-Stim'), ...
    axis off
cbarset(xpos(5),ypos(1),w,h)

subplot('position',[xpos(1) ypos(2) w h]), ...
    mapStimArray(subTotPwrE_preS_bt(goodChansE),'','',goodChansE), ...
    caxis(subELims_bt), ...
    ylabel({'Monkey E', '(No Stim)'})
subplot('position',[xpos(2) ypos(2) w h]), ...
    mapStimArray(subTotPwrE_stm1_bt(goodChansE),'','',goodChansE), ...
    caxis(subELims_bt), ...
    axis off
subplot('position',[xpos(3) ypos(2) w h]), ...
    mapStimArray(subTotPwrE_stm3_bt(goodChansE),'','',goodChansE), ...
    caxis(subELims_bt), ...
    axis off
subplot('position',[xpos(4) ypos(2) w h]), ...
    mapStimArray(subTotPwrE_stm5_bt(goodChansE),'','',goodChansE), ...
    caxis(subELims_bt), ...
    axis off
subplot('position',[xpos(5) ypos(2) w h]), ...
    mapStimArray(subTotPwrE_post_bt(goodChansE),'','',goodChansE), ...
    caxis(subELims_bt), ...
    axis off
cbarset(xpos(5),ypos(2),w,h)

subplot('position',[xpos(1) ypos(3) w h]), ...
    mapStimArray(subTotPwrF_preS_bt(goodChansF),'','',goodChansF), ...
    caxis(subFLims_bt), ...
    ylabel({'Monkey F', '(Stim)'})
subplot('position',[xpos(2) ypos(3) w h]), ...
    mapStimArray(subTotPwrF_stm1_bt(goodChansF),'','',goodChansF), ...
    caxis(subFLims_bt), ...
    axis off
subplot('position',[xpos(3) ypos(3) w h]), ...
    mapStimArray(subTotPwrF_stm3_bt(goodChansF),'','',goodChansF), ...
    caxis(subFLims_bt), ...
    axis off
subplot('position',[xpos(4) ypos(3) w h]), ...
    mapStimArray(subTotPwrF_stm5_bt(goodChansF),'','',goodChansF), ...
    caxis(subFLims_bt), ...
    axis off
subplot('position',[xpos(5) ypos(3) w h]), ...
    mapStimArray(subTotPwrF_post_bt(goodChansF),'','',goodChansF), ...
    caxis(subFLims_bt), ...
    axis off
cbarset(xpos(5),ypos(3),w,h)

subplot('position',[xpos(1) ypos(4) w h]), ...
    mapStimArray(subTotPwrG_preS_bt(goodChansG),'','',goodChansG), ...
    caxis(subGLims_bt), ...
    ylabel({'Monkey G', '(Stim)'})
subplot('position',[xpos(2) ypos(4) w h]), ...
    mapStimArray(subTotPwrG_stm1_bt(goodChansG),'','',goodChansG), ...
    caxis(subGLims_bt), ...
    axis off
subplot('position',[xpos(3) ypos(4) w h]), ...
    mapStimArray(subTotPwrG_stm3_bt(goodChansG),'','',goodChansG), ...
    caxis(subGLims_bt), ...
    axis off
subplot('position',[xpos(4) ypos(4) w h]), ...
    mapStimArray(subTotPwrG_stm5_bt(goodChansG),'','',goodChansG), ...
    caxis(subGLims_bt), ...
    axis off
subplot('position',[xpos(5) ypos(4) w h]), ...
    mapStimArray(subTotPwrG_post_bt(goodChansG),'','',goodChansG), ...
    caxis(subGLims_bt), ...
    axis off
cbarset(xpos(5),ypos(4),w,h)

[~,ht] = suplabel('Change in Beta Power','t',[.08 .1 .84 .84]);

%% 13. Show Change in Power Heat Maps - Theta

% set color axis limits
subMaxD_th = max([subTotPwrD_preS_th ...
    subTotPwrD_stm3_th subTotPwrD_stm5_th]);
subMinD_th = min([subTotPwrD_preS_th ...
    subTotPwrD_stm3_th subTotPwrD_stm5_th]);
subDLims_th = [subMinD_th subMaxD_th];
subDLims_th = [-max(abs(subDLims_th)) max(abs(subDLims_th))];

subMaxE_th = max([subTotPwrE_preS_th subTotPwrE_stm1_th ...
    subTotPwrE_stm3_th subTotPwrE_stm5_th subTotPwrE_post_th]);
subMinE_th = min([subTotPwrE_preS_th subTotPwrE_stm1_th ...
    subTotPwrE_stm3_th subTotPwrE_stm5_th subTotPwrE_post_th]);
subELims_th = [subMinE_th subMaxE_th];
subELims_th = [-max(abs(subELims_th)) max(abs(subELims_th))];

subMaxF_th = max([subTotPwrF_preS_th subTotPwrF_stm1_th ...
    subTotPwrF_stm3_th subTotPwrF_stm5_th subTotPwrF_post_th]);
subMinF_th = min([subTotPwrF_preS_th subTotPwrF_stm1_th ...
    subTotPwrF_stm3_th subTotPwrF_stm5_th subTotPwrF_post_th]);
subFLims_th = [subMinF_th subMaxF_th];
subFLims_th = [-max(abs(subFLims_th)) max(abs(subFLims_th))];
subFLims_th = [-4e6 4e6];

subMaxG_th = max([subTotPwrG_preS_th subTotPwrG_stm1_th ...
    subTotPwrG_stm3_th subTotPwrG_stm5_th subTotPwrG_post_th]);
subMinG_th = min([subTotPwrG_preS_th subTotPwrG_stm1_th ...
    subTotPwrG_stm3_th subTotPwrG_stm5_th subTotPwrG_post_th]);
subGLims_th = [subMinG_th subMaxG_th];
subGLims_th = [-max(abs(subGLims_th)) max(abs(subGLims_th))];

xpos = linspace(.02,1-.26,5); ypos = [.7 .5 .3 .1]; w = .18; h = w;

% Theta Heat Maps
figure('color','w','units','normalize','outerposition',[0 0 1 1])
subplot('position',[xpos(1) ypos(1) w h]), ...
    mapStimArray(subTotPwrD_preS_th(goodChansD),'','',goodChansD), ...
    caxis(subDLims_th), ...
    ylabel({'Monkey D', '(No Stim)'}), ...
    title('Pre-Stim')
subplot('position',[xpos(2) ypos(1) w h]), ...
%     mapStimArray(subTotPwrD_stm1_th(goodChansD),'','',goodChansD), ...
    caxis(subDLims_th), ...
    title('10 min Stim'), ...
    axis off
subplot('position',[xpos(3) ypos(1) w h]), ...
    mapStimArray(subTotPwrD_stm3_th(goodChansD),'','',goodChansD), ...
    caxis(subDLims_th), ...
    title('30 min Stim'), ...
    axis off
subplot('position',[xpos(4) ypos(1) w h]), ...
    mapStimArray(subTotPwrD_stm5_th(goodChansD),'','',goodChansD), ...
    caxis(subDLims_th), ...
    title('50 min Stim'), ...
    axis off
subplot('position',[xpos(5) ypos(1) w h]), ...
%     mapStimArray(subTotPwrD_post_th(goodChansD),'','',goodChansD), ...
    caxis(subDLims_th), ...
    title('Post-Stim'), ...
    axis off
cbarset(xpos(5),ypos(1),w,h)

subplot('position',[xpos(1) ypos(2) w h]), ...
    mapStimArray(subTotPwrE_preS_th(goodChansE),'','',goodChansE), ...
    caxis(subELims_th), ...
    ylabel({'Monkey E', '(No Stim)'})
subplot('position',[xpos(2) ypos(2) w h]), ...
    mapStimArray(subTotPwrE_stm1_th(goodChansE),'','',goodChansE), ...
    caxis(subELims_th), ...
    axis off
subplot('position',[xpos(3) ypos(2) w h]), ...
    mapStimArray(subTotPwrE_stm3_th(goodChansE),'','',goodChansE), ...
    caxis(subELims_th), ...
    axis off
subplot('position',[xpos(4) ypos(2) w h]), ...
    mapStimArray(subTotPwrE_stm5_th(goodChansE),'','',goodChansE), ...
    caxis(subELims_th), ...
    axis off
subplot('position',[xpos(5) ypos(2) w h]), ...
    mapStimArray(subTotPwrE_post_th(goodChansE),'','',goodChansE), ...
    caxis(subELims_th), ...
    axis off
cbarset(xpos(5),ypos(2),w,h)

subplot('position',[xpos(1) ypos(3) w h]), ...
    mapStimArray(subTotPwrF_preS_th(goodChansF),'','',goodChansF), ...
    caxis(subFLims_th), ...
    ylabel({'Monkey F', '(Stim)'})
subplot('position',[xpos(2) ypos(3) w h]), ...
    mapStimArray(subTotPwrF_stm1_th(goodChansF),'','',goodChansF), ...
    caxis(subFLims_th), ...
    axis off
subplot('position',[xpos(3) ypos(3) w h]), ...
    mapStimArray(subTotPwrF_stm3_th(goodChansF),'','',goodChansF), ...
    caxis(subFLims_th), ...
    axis off
subplot('position',[xpos(4) ypos(3) w h]), ...
    mapStimArray(subTotPwrF_stm5_th(goodChansF),'','',goodChansF), ...
    caxis(subFLims_th), ...
    axis off
subplot('position',[xpos(5) ypos(3) w h]), ...
    mapStimArray(subTotPwrF_post_th(goodChansF),'','',goodChansF), ...
    caxis(subFLims_th), ...
    axis off
cbarset(xpos(5),ypos(3),w,h)

subplot('position',[xpos(1) ypos(4) w h]), ...
    mapStimArray(subTotPwrG_preS_th(goodChansG),'','',goodChansG), ...
    caxis(subGLims_th), ...
    ylabel({'Monkey G', '(Stim)'})
subplot('position',[xpos(2) ypos(4) w h]), ...
    mapStimArray(subTotPwrG_stm1_th(goodChansG),'','',goodChansG), ...
    caxis(subGLims_th), ...
    axis off
subplot('position',[xpos(3) ypos(4) w h]), ...
    mapStimArray(subTotPwrG_stm3_th(goodChansG),'','',goodChansG), ...
    caxis(subGLims_th), ...
    axis off
subplot('position',[xpos(4) ypos(4) w h]), ...
    mapStimArray(subTotPwrG_stm5_th(goodChansG),'','',goodChansG), ...
    caxis(subGLims_th), ...
    axis off
subplot('position',[xpos(5) ypos(4) w h]), ...
    mapStimArray(subTotPwrG_post_th(goodChansG),'','',goodChansG), ...
    caxis(subGLims_th), ...
    axis off
cbarset(xpos(5),ypos(4),w,h)

[~,ht] = suplabel('Change in Theta Power','t',[.08 .1 .84 .84]);

% print -dpdf -painters ThetaChangeHeatMaps

%% 14. Make a Figure for Manuscript Figure 7b
% 07.23.2021
% want to include monkeys E and G in high gamma and theta
% have same color scale for both

subEGLims_hg = [-2.5e5 2.5e5];
subEGLims_th = [-5e6 5e6];

xpos = linspace(.02,1-.26,5); ypos = [.7 .5 .3 .1]; w = .18; h = w;

figure('color','w','units','normalize','outerposition',[0 0 1 1])
subplot('position',[xpos(1) ypos(2) w h]), ...
    mapStimArray(subTotPwrE_preS_hg(goodChansE),'','',goodChansE), ...
    caxis(subEGLims_hg), ...
    ylabel({'Monkey E', '(No Stim)'}), ...
    title('Pre-Stim')
subplot('position',[xpos(2) ypos(2) w h]), ...
    mapStimArray(subTotPwrE_stm1_hg(goodChansE),'','',goodChansE), ...
    caxis(subEGLims_hg), ...
    axis off, ...
    title('10 min Stim')
subplot('position',[xpos(3) ypos(2) w h]), ...
    mapStimArray(subTotPwrE_stm3_hg(goodChansE),'','',goodChansE), ...
    caxis(subEGLims_hg), ...
    axis off, ...
    title('30 min Stim')
subplot('position',[xpos(4) ypos(2) w h]), ...
    mapStimArray(subTotPwrE_stm5_hg(goodChansE),'','',goodChansE), ...
    caxis(subEGLims_hg), ...
    axis off, ...
    title('50 min Stim')
subplot('position',[xpos(5) ypos(2) w h]), ...
    mapStimArray(subTotPwrE_post_hg(goodChansE),'','',goodChansE), ...
    caxis(subEGLims_hg), ...
    axis off, ...
    title('Post-Stim')

subplot('position',[xpos(1) ypos(3) w h]), ...
    mapStimArray(subTotPwrG_preS_hg(goodChansG),'','',goodChansG), ...
    caxis(subEGLims_hg), ...
    ylabel({'Monkey G', '(Stim)'})
subplot('position',[xpos(2) ypos(3) w h]), ...
    mapStimArray(subTotPwrG_stm1_hg(goodChansG),'','',goodChansG), ...
    caxis(subEGLims_hg), ...
    axis off
subplot('position',[xpos(3) ypos(3) w h]), ...
    mapStimArray(subTotPwrG_stm3_hg(goodChansG),'','',goodChansG), ...
    caxis(subEGLims_hg), ...
    axis off
subplot('position',[xpos(4) ypos(3) w h]), ...
    mapStimArray(subTotPwrG_stm5_hg(goodChansG),'','',goodChansG), ...
    caxis(subEGLims_hg), ...
    axis off
subplot('position',[xpos(5) ypos(3) w h]), ...
    mapStimArray(subTotPwrG_post_hg(goodChansG),'','',goodChansG), ...
    caxis(subEGLims_hg), ...
    axis off
cbarset(xpos(5),ypos(3),w,.37)

[~,ht] = suplabel('Change in High Gamma Power','t',[.08 -.08 .84 .84]);

% print -dpdf -painters HighGammaChange7b

figure('color','w','units','normalize','outerposition',[0 0 1 1])
subplot('position',[xpos(1) ypos(2) w h]), ...
    mapStimArray(subTotPwrE_preS_th(goodChansE),'','',goodChansE), ...
    caxis(subEGLims_th), ...
    ylabel({'Monkey E', '(No Stim)'}), ...
    title('Pre-Stim')
subplot('position',[xpos(2) ypos(2) w h]), ...
    mapStimArray(subTotPwrE_stm1_th(goodChansE),'','',goodChansE), ...
    caxis(subEGLims_th), ...
    axis off, ...
    title('10 min Stim')
subplot('position',[xpos(3) ypos(2) w h]), ...
    mapStimArray(subTotPwrE_stm3_th(goodChansE),'','',goodChansE), ...
    caxis(subEGLims_th), ...
    axis off, ...
    title('30 min Stim')
subplot('position',[xpos(4) ypos(2) w h]), ...
    mapStimArray(subTotPwrE_stm5_th(goodChansE),'','',goodChansE), ...
    caxis(subEGLims_th), ...
    axis off, ...
    title('50 min Stim')
subplot('position',[xpos(5) ypos(2) w h]), ...
    mapStimArray(subTotPwrE_post_th(goodChansE),'','',goodChansE), ...
    caxis(subEGLims_th), ...
    axis off, ...
    title('Post-Stim')

subplot('position',[xpos(1) ypos(3) w h]), ...
    mapStimArray(subTotPwrG_preS_th(goodChansG),'','',goodChansG), ...
    caxis(subEGLims_th), ...
    ylabel({'Monkey G', '(Stim)'})
subplot('position',[xpos(2) ypos(3) w h]), ...
    mapStimArray(subTotPwrG_stm1_th(goodChansG),'','',goodChansG), ...
    caxis(subEGLims_th), ...
    axis off
subplot('position',[xpos(3) ypos(3) w h]), ...
    mapStimArray(subTotPwrG_stm3_th(goodChansG),'','',goodChansG), ...
    caxis(subEGLims_th), ...
    axis off
subplot('position',[xpos(4) ypos(3) w h]), ...
    mapStimArray(subTotPwrG_stm5_th(goodChansG),'','',goodChansG), ...
    caxis(subEGLims_th), ...
    axis off
subplot('position',[xpos(5) ypos(3) w h]), ...
    mapStimArray(subTotPwrG_post_th(goodChansG),'','',goodChansG), ...
    caxis(subEGLims_th), ...
    axis off
cbarset(xpos(5),ypos(3),w,.37)

[~,ht] = suplabel('Change in Theta Power','t',[.08 -.08 .84 .84]);

% print -dpdf -painters ThetaChange7b
%% 15. Calculate Power Over Time (dt = 10s) for Monkey D

dt = 10*Fs; % number of samples every 10 seconds

lngthD_allbase = size(cleanD_allbase_hg,1);
lngthD_drngill = size(cleanD_drngill_hg,1);
lngthD_allpost = size(cleanD_allpost_hg,1);

NdtD_allbase = floor(lngthD_allbase/dt); % number of 10 second intervals
NdtD_drngill = floor(lngthD_drngill/dt);
NdtD_allpost = floor(lngthD_allpost/dt);

pwrD_allbase_hg = zeros(NdtD_allbase,length(channels));
pwrD_allbase_lg = zeros(NdtD_allbase,length(channels));
pwrD_allbase_bt = zeros(NdtD_allbase,length(channels));
pwrD_allbase_th = zeros(NdtD_allbase,length(channels));

pwrD_drngill_hg = zeros(NdtD_drngill,length(channels));
pwrD_drngill_lg = zeros(NdtD_drngill,length(channels));
pwrD_drngill_bt = zeros(NdtD_drngill,length(channels));
pwrD_drngill_th = zeros(NdtD_drngill,length(channels));

pwrD_allpost_hg = zeros(NdtD_allpost,length(channels));
pwrD_allpost_lg = zeros(NdtD_allpost,length(channels));
pwrD_allpost_bt = zeros(NdtD_allpost,length(channels));
pwrD_allpost_th = zeros(NdtD_allpost,length(channels));

tic
for idt = 1:NdtD_allbase
    
    interval = ((idt-1)*dt+1):(idt*dt); % time interval in samples
    
    for iChan = channels
        if iChan ~= 8
            pwrD_allbase_hg(idt,iChan) = SignalPower(cleanD_allbase_hg(interval,iChan),Fs);
            pwrD_allbase_lg(idt,iChan) = SignalPower(cleanD_allbase_lg(interval,iChan),Fs);       
            pwrD_allbase_bt(idt,iChan) = SignalPower(cleanD_allbase_bt(interval,iChan),Fs);       
            pwrD_allbase_th(idt,iChan) = SignalPower(cleanD_allbase_th(interval,iChan),Fs);
        end        
    end
end
toc
disp('Calculated All Baseline Power')

for idt = 1:NdtD_drngill
    
    interval = ((idt-1)*dt+1):(idt*dt); % time interval in samples
    
    for iChan = channels
        if iChan ~= 8
            pwrD_drngill_hg(idt,iChan) = SignalPower(cleanD_drngill_hg(interval,iChan),Fs);
            pwrD_drngill_lg(idt,iChan) = SignalPower(cleanD_drngill_lg(interval,iChan),Fs);       
            pwrD_drngill_bt(idt,iChan) = SignalPower(cleanD_drngill_bt(interval,iChan),Fs);       
            pwrD_drngill_th(idt,iChan) = SignalPower(cleanD_drngill_th(interval,iChan),Fs);
        end        
    end
end
toc
disp('Calculated All During Illumination Power')

for idt = 1:NdtD_allpost
    
    interval = ((idt-1)*dt+1):(idt*dt); % time interval in samples
    
    for iChan = channels
        if iChan ~= 8
            pwrD_allpost_hg(idt,iChan) = SignalPower(cleanD_allpost_hg(interval,iChan),Fs);
            pwrD_allpost_lg(idt,iChan) = SignalPower(cleanD_allpost_lg(interval,iChan),Fs);       
            pwrD_allpost_bt(idt,iChan) = SignalPower(cleanD_allpost_bt(interval,iChan),Fs);      
            pwrD_allpost_th(idt,iChan) = SignalPower(cleanD_allpost_th(interval,iChan),Fs);
        end        
    end
end
toc
disp('Calculated All PostPT Power')

% Remove channel 8 for Monkey D
pwrD_allbase_hg(:,8) = nan*ones(size(pwrD_allbase_hg(:,8))); 
pwrD_allbase_lg(:,8) = nan*ones(size(pwrD_allbase_lg(:,8)));
pwrD_allbase_bt(:,8) = nan*ones(size(pwrD_allbase_bt(:,8)));
pwrD_allbase_th(:,8) = nan*ones(size(pwrD_allbase_th(:,8)));

pwrD_drngill_hg(:,8) = nan*ones(size(pwrD_drngill_hg(:,8))); 
pwrD_drngill_lg(:,8) = nan*ones(size(pwrD_drngill_lg(:,8)));
pwrD_drngill_bt(:,8) = nan*ones(size(pwrD_drngill_bt(:,8)));
pwrD_drngill_th(:,8) = nan*ones(size(pwrD_drngill_th(:,8)));

pwrD_allpost_hg(:,8) = nan*ones(size(pwrD_allpost_hg(:,8)));
pwrD_allpost_lg(:,8) = nan*ones(size(pwrD_allpost_lg(:,8)));
pwrD_allpost_bt(:,8) = nan*ones(size(pwrD_allpost_bt(:,8)));
pwrD_allpost_th(:,8) = nan*ones(size(pwrD_allpost_th(:,8)));

disp('Finished Calculated Power')

%% 16. Calculate Power Over Time (dt = 10s) for Monkey E

dt = 10*Fs; % number of samples every 10 seconds

lngthE_allbase = size(cleanE_allbase_hg,1);
lngthE_drngill = size(cleanE_drngill_hg,1);
lngthE_allpost = size(cleanE_allpost_hg,1);

NdtE_allbase = floor(lngthE_allbase/dt); % number of 10 second intervals
NdtE_drngill = floor(lngthE_drngill/dt);
NdtE_allpost = floor(lngthE_allpost/dt);

pwrE_allbase_hg = zeros(NdtE_allbase,length(channels));
pwrE_allbase_lg = zeros(NdtE_allbase,length(channels));
pwrE_allbase_bt = zeros(NdtE_allbase,length(channels));
pwrE_allbase_th = zeros(NdtE_allbase,length(channels));

pwrE_drngill_hg = zeros(NdtE_drngill,length(channels));
pwrE_drngill_lg = zeros(NdtE_drngill,length(channels));
pwrE_drngill_bt = zeros(NdtE_drngill,length(channels));
pwrE_drngill_th = zeros(NdtE_drngill,length(channels));

pwrE_allpost_hg = zeros(NdtE_allpost,length(channels));
pwrE_allpost_lg = zeros(NdtE_allpost,length(channels));
pwrE_allpost_bt = zeros(NdtE_allpost,length(channels));
pwrE_allpost_th = zeros(NdtE_allpost,length(channels));

tic
for idt = 1:NdtE_allbase
    
    interval = ((idt-1)*dt+1):(idt*dt); % time interval in samples
    
    for iChan = channels
        if iChan ~= 8
            pwrE_allbase_hg(idt,iChan) = SignalPower(cleanE_allbase_hg(interval,iChan),Fs);
            pwrE_allbase_lg(idt,iChan) = SignalPower(cleanE_allbase_lg(interval,iChan),Fs);       
            pwrE_allbase_bt(idt,iChan) = SignalPower(cleanE_allbase_bt(interval,iChan),Fs);       
            pwrE_allbase_th(idt,iChan) = SignalPower(cleanE_allbase_th(interval,iChan),Fs);
        end        
    end
end
toc
disp('Calculated All Baseline Power')

for idt = 1:NdtE_drngill
    
    interval = ((idt-1)*dt+1):(idt*dt); % time interval in samples
    
    for iChan = channels
        if iChan ~= 8
            pwrE_drngill_hg(idt,iChan) = SignalPower(cleanE_drngill_hg(interval,iChan),Fs);
            pwrE_drngill_lg(idt,iChan) = SignalPower(cleanE_drngill_lg(interval,iChan),Fs);       
            pwrE_drngill_bt(idt,iChan) = SignalPower(cleanE_drngill_bt(interval,iChan),Fs);       
            pwrE_drngill_th(idt,iChan) = SignalPower(cleanE_drngill_th(interval,iChan),Fs);
        end        
    end
end
toc
disp('Calculated All During Illumination Power')

for idt = 1:NdtE_allpost
    
    interval = ((idt-1)*dt+1):(idt*dt); % time interval in samples
    
    for iChan = channels
        if iChan ~= 8 && iChan ~= 24 && iChan ~= 25
            pwrE_allpost_hg(idt,iChan) = SignalPower(cleanE_allpost_hg(interval,iChan),Fs);
            pwrE_allpost_lg(idt,iChan) = SignalPower(cleanE_allpost_lg(interval,iChan),Fs);       
            pwrE_allpost_bt(idt,iChan) = SignalPower(cleanE_allpost_bt(interval,iChan),Fs);      
            pwrE_allpost_th(idt,iChan) = SignalPower(cleanE_allpost_th(interval,iChan),Fs);
                    
        end
    end
end
toc
disp('Calculated All PostPT Power')

% Remove channel 8, 24, and 25 for Monkey E
for iChan = [8, 24, 25]
    pwrE_allbase_hg(:,iChan) = nan*ones(size(pwrE_allbase_hg(:,8))); 
    pwrE_allbase_lg(:,iChan) = nan*ones(size(pwrE_allbase_lg(:,8)));
    pwrE_allbase_bt(:,iChan) = nan*ones(size(pwrE_allbase_bt(:,8)));
    pwrE_allbase_th(:,iChan) = nan*ones(size(pwrE_allbase_th(:,8)));

    pwrE_drngill_hg(:,iChan) = nan*ones(size(pwrE_drngill_hg(:,8))); 
    pwrE_drngill_lg(:,iChan) = nan*ones(size(pwrE_drngill_lg(:,8)));
    pwrE_drngill_bt(:,iChan) = nan*ones(size(pwrE_drngill_bt(:,8)));
    pwrE_drngill_th(:,iChan) = nan*ones(size(pwrE_drngill_th(:,8)));

    pwrE_allpost_hg(:,iChan) = nan*ones(size(pwrE_allpost_hg(:,8)));
    pwrE_allpost_lg(:,iChan) = nan*ones(size(pwrE_allpost_lg(:,8)));
    pwrE_allpost_bt(:,iChan) = nan*ones(size(pwrE_allpost_bt(:,8)));
    pwrE_allpost_th(:,iChan) = nan*ones(size(pwrE_allpost_th(:,8)));
end

disp('Finished Calculated Power')

%% 17. Load monkeys F and G Power Calculated for dt = 10s

load(['PT6-7 power data' filesep 'dtPower_PT6_high gamma.mat']);
load(['PT6-7 power data' filesep 'dtPower_PT6_low gamma.mat']);
load(['PT6-7 power data' filesep 'dtPower_PT6_beta.mat']);
load(['PT6-7 power data' filesep 'dtPower_PT6_theta.mat']);

load(['PT6-7 power data' filesep 'dtPower_PT7_high gamma.mat']);
load(['PT6-7 power data' filesep 'dtPower_PT7_low gamma.mat']);
load(['PT6-7 power data' filesep 'dtPower_PT7_beta.mat']);
load(['PT6-7 power data' filesep 'dtPower_PT7_theta.mat']);

%% 18. Align Recordings so the Can be Plotted Together

% Need all Time points to be aligned so they can be plotted together

% find monkey with shortest baseline recording
shortBase = min([length(pwrD_allbase_hg) length(pwrE_allbase_hg) length(pwrF_allbase_hg) length(pwrG_allbase_hg)]);
alignD_allbase_hg = pwrD_allbase_hg(end-shortBase+1:end,:);
alignE_allbase_hg = pwrE_allbase_hg(end-shortBase+1:end,:);
alignF_allbase_hg = pwrF_allbase_hg(end-shortBase+1:end,:);
alignG_allbase_hg = pwrG_allbase_hg(end-shortBase+1:end,:);

alignD_allbase_lg = pwrD_allbase_lg(end-shortBase+1:end,:);
alignE_allbase_lg = pwrE_allbase_lg(end-shortBase+1:end,:);
alignF_allbase_lg = pwrF_allbase_lg(end-shortBase+1:end,:);
alignG_allbase_lg = pwrG_allbase_lg(end-shortBase+1:end,:);

alignD_allbase_bt = pwrD_allbase_bt(end-shortBase+1:end,:);
alignE_allbase_bt = pwrE_allbase_bt(end-shortBase+1:end,:);
alignF_allbase_bt = pwrF_allbase_bt(end-shortBase+1:end,:);
alignG_allbase_bt = pwrG_allbase_bt(end-shortBase+1:end,:);

alignD_allbase_th = pwrD_allbase_th(end-shortBase+1:end,:);
alignE_allbase_th = pwrE_allbase_th(end-shortBase+1:end,:);
alignF_allbase_th = pwrF_allbase_th(end-shortBase+1:end,:);
alignG_allbase_th = pwrG_allbase_th(end-shortBase+1:end,:);

% find shortest illumination recording
shortDrng = min([length(pwrD_drngill_hg) length(pwrE_drngill_hg) length(pwrF_allduringPT_hg) length(pwrG_allduringPT_hg)]);
alignD_drngill_hg = pwrD_allbase_hg(1:shortDrng,:);
alignE_drngill_hg = pwrE_allbase_hg(1:shortDrng,:);
alignF_drngill_hg = pwrF_allbase_hg(1:shortDrng,:);
alignG_drngill_hg = pwrG_allbase_hg(1:shortDrng,:);

alignD_drngill_lg = pwrD_allbase_lg(1:shortDrng,:);
alignE_drngill_lg = pwrE_allbase_lg(1:shortDrng,:);
alignF_drngill_lg = pwrF_allbase_lg(1:shortDrng,:);
alignG_drngill_lg = pwrG_allbase_lg(1:shortDrng,:);

alignD_drngill_bt = pwrD_allbase_bt(1:shortDrng,:);
alignE_drngill_bt = pwrE_allbase_bt(1:shortDrng,:);
alignF_drngill_bt = pwrF_allbase_bt(1:shortDrng,:);
alignG_drngill_bt = pwrG_allbase_bt(1:shortDrng,:);

alignD_drngill_th = pwrD_allbase_th(1:shortDrng,:);
alignE_drngill_th = pwrE_allbase_th(1:shortDrng,:);
alignF_drngill_th = pwrF_allbase_th(1:shortDrng,:);
alignG_drngill_th = pwrG_allbase_th(1:shortDrng,:);

% for monkeys F and G, need to shift monkey G back 4-5 values to get them
% to align for stim sessions
alignG_allstim_hg = pwrG_allstim_hg(5:end,:);
alignG_allstim_lg = pwrG_allstim_lg(5:end,:);
alignG_allstim_bt = pwrG_allstim_bt(5:end,:);
alignG_allstim_th = pwrG_allstim_th(5:end,:);

% need to add 10 minutes of last stim block, Jasmine forgot to add it
pwrF_allstim_hg = [pwrF_allstim_hg; NaN(60,32)]; % there are 60 10s periods in 10 minutes
pwrF_allstim_lg = [pwrF_allstim_lg; NaN(60,32)];
pwrF_allstim_bt = [pwrF_allstim_bt; NaN(60,32)];
pwrF_allstim_th = [pwrF_allstim_th; NaN(60,32)];

alignG_allstim_hg = [alignG_allstim_hg; NaN(60,32)]; % there are 60 10s periods in 10 minutes
alignG_allstim_lg = [alignG_allstim_lg; NaN(60,32)];
alignG_allstim_bt = [alignG_allstim_bt; NaN(60,32)];
alignG_allstim_th = [alignG_allstim_th; NaN(60,32)];

%% 19. Calculate Mean Power over Time with Standard Error of Mean

smoFactor = 0.5;

% concatenate all monkey power values for dt = 10s
allD_hg = [alignD_allbase_hg;alignD_drngill_hg;pwrD_allpost_hg];
allD_lg = [alignD_allbase_lg;alignD_drngill_lg;pwrD_allpost_lg];
allD_bt = [alignD_allbase_bt;alignD_drngill_bt;pwrD_allpost_bt];
allD_th = [alignD_allbase_th;alignD_drngill_th;pwrD_allpost_th];

allE_hg = [alignE_allbase_hg;alignE_drngill_hg;pwrE_allpost_hg];
allE_lg = [alignE_allbase_lg;alignE_drngill_lg;pwrE_allpost_lg];
allE_bt = [alignE_allbase_bt;alignE_drngill_bt;pwrE_allpost_bt];
allE_th = [alignE_allbase_th;alignE_drngill_th;pwrE_allpost_th];

allF_hg = [alignF_allbase_hg;alignF_drngill_hg;pwrF_allpostPT_hg;pwrF_allstim_hg;pwrF_allpostStim_hg];
allF_lg = [alignF_allbase_lg;alignF_drngill_lg;pwrF_allpostPT_lg;pwrF_allstim_lg;pwrF_allpostStim_lg];
allF_bt = [alignF_allbase_bt;alignF_drngill_bt;pwrF_allpostPT_bt;pwrF_allstim_bt;pwrF_allpostStim_bt];
allF_th = [alignF_allbase_th;alignF_drngill_th;pwrF_allpostPT_th;pwrF_allstim_th;pwrF_allpostStim_th];

allG_hg = [alignG_allbase_hg;alignG_drngill_hg;pwrG_allpostPT_hg;alignG_allstim_hg;pwrG_allpostStim_hg];
allG_lg = [alignG_allbase_lg;alignG_drngill_lg;pwrG_allpostPT_lg;alignG_allstim_lg;pwrG_allpostStim_lg];
allG_bt = [alignG_allbase_bt;alignG_drngill_bt;pwrG_allpostPT_bt;alignG_allstim_bt;pwrG_allpostStim_bt];
allG_th = [alignG_allbase_th;alignG_drngill_th;pwrG_allpostPT_th;alignG_allstim_th;pwrG_allpostStim_th];

% before smoothing, find power values that are NaN due to stim blocks -
% smoothing sometimes fills them in
[tNaNF,cNaNF] = find(isnan(allF_hg));
[tNaNG,cNaNG] = find(isnan(allG_hg));

% smooth the mean power over time (along the columns)
smoD_hg = smoothdata(allD_hg,1,'omitnan','SmoothingFactor',smoFactor);
smoD_lg = smoothdata(allD_lg,1,'omitnan','SmoothingFactor',smoFactor);
smoD_bt = smoothdata(allD_bt,1,'omitnan','SmoothingFactor',smoFactor);
smoD_th = smoothdata(allD_th,1,'omitnan','SmoothingFactor',smoFactor);

smoE_hg = smoothdata(allE_hg,1,'omitnan','SmoothingFactor',smoFactor);
smoE_lg = smoothdata(allE_lg,1,'omitnan','SmoothingFactor',smoFactor);
smoE_bt = smoothdata(allE_bt,1,'omitnan','SmoothingFactor',smoFactor);
smoE_th = smoothdata(allE_th,1,'omitnan','SmoothingFactor',smoFactor);

smoF_hg = smoothdata(allF_hg,1,'omitnan','SmoothingFactor',smoFactor);
smoF_lg = smoothdata(allF_lg,1,'omitnan','SmoothingFactor',smoFactor);
smoF_bt = smoothdata(allF_bt,1,'omitnan','SmoothingFactor',smoFactor);
smoF_th = smoothdata(allF_th,1,'omitnan','SmoothingFactor',smoFactor);

smoG_hg = smoothdata(allG_hg,1,'omitnan','SmoothingFactor',smoFactor);
smoG_lg = smoothdata(allG_lg,1,'omitnan','SmoothingFactor',smoFactor);
smoG_bt = smoothdata(allG_bt,1,'omitnan','SmoothingFactor',smoFactor);
smoG_th = smoothdata(allG_th,1,'omitnan','SmoothingFactor',smoFactor);

% make sure smoothing doesn't fill in NaN values - for some reason I have
% to use for loops here
for i = 1:length(tNaNF)
    smoF_hg(tNaNF(i),cNaNF(i)) = NaN;
    smoF_lg(tNaNF(i),cNaNF(i)) = NaN;
    smoF_bt(tNaNF(i),cNaNF(i)) = NaN;
    smoF_th(tNaNF(i),cNaNF(i)) = NaN;
end

for i = 1:length(tNaNG)
    smoG_hg(tNaNG(i),cNaNG(i)) = NaN;
    smoG_lg(tNaNG(i),cNaNG(i)) = NaN;
    smoG_bt(tNaNG(i),cNaNG(i)) = NaN;
    smoG_th(tNaNG(i),cNaNG(i)) = NaN;
end

% calculate the mean smoothed power across all channels
meanD_hg = mean(smoD_hg,2,'omitnan');
meanD_lg = mean(smoD_lg,2,'omitnan');
meanD_bt = mean(smoD_bt,2,'omitnan');
meanD_th = mean(smoD_th,2,'omitnan');

meanE_hg = mean(smoE_hg,2,'omitnan');
meanE_lg = mean(smoE_lg,2,'omitnan');
meanE_bt = mean(smoE_bt,2,'omitnan');
meanE_th = mean(smoE_th,2,'omitnan');

meanF_hg = mean(smoF_hg,2,'omitnan');% meanF_hg(tNaNF) = NaN;
meanF_lg = mean(smoF_lg,2,'omitnan');% meanF_lg(tNaNF) = NaN;
meanF_bt = mean(smoF_bt,2,'omitnan');% meanF_bt(tNaNF) = NaN;
meanF_th = mean(smoF_th,2,'omitnan');% meanF_th(tNaNF) = NaN;

meanG_hg = mean(smoG_hg,2,'omitnan');% meanG_hg(tNaNG) = NaN;
meanG_lg = mean(smoG_lg,2,'omitnan');% meanG_lg(tNaNG) = NaN;
meanG_bt = mean(smoG_bt,2,'omitnan');% meanG_bt(tNaNG) = NaN;
meanG_th = mean(smoG_th,2,'omitnan');% meanG_th(tNaNG) = NaN;

% calculate the 2 x standard error of the mean smoothed power
steD_hg = 2.*std(smoD_hg,0,2,'omitnan')./sqrt(sum(~isnan(allD_hg(1,:))));
steD_lg = 2.*std(smoD_lg,0,2,'omitnan')./sqrt(sum(~isnan(allD_hg(1,:))));
steD_bt = 2.*std(smoD_bt,0,2,'omitnan')./sqrt(sum(~isnan(allD_hg(1,:))));
steD_th = 2.*std(smoD_th,0,2,'omitnan')./sqrt(sum(~isnan(allD_hg(1,:))));

steE_hg = 2.*std(smoE_hg,0,2,'omitnan')./sqrt(sum(~isnan(allE_hg(1,:))));
steE_lg = 2.*std(smoE_lg,0,2,'omitnan')./sqrt(sum(~isnan(allE_hg(1,:))));
steE_bt = 2.*std(smoE_bt,0,2,'omitnan')./sqrt(sum(~isnan(allE_hg(1,:))));
steE_th = 2.*std(smoE_th,0,2,'omitnan')./sqrt(sum(~isnan(allE_hg(1,:))));

steF_hg = 2.*std(smoF_hg,0,2,'omitnan')./sqrt(sum(~isnan(allF_hg(1,:))));
steF_lg = 2.*std(smoF_lg,0,2,'omitnan')./sqrt(sum(~isnan(allF_lg(1,:))));
steF_bt = 2.*std(smoF_bt,0,2,'omitnan')./sqrt(sum(~isnan(allF_bt(1,:))));
steF_th = 2.*std(smoF_th,0,2,'omitnan')./sqrt(sum(~isnan(allF_th(1,:))));

steG_hg = 2.*std(smoG_hg,0,2,'omitnan')./sqrt(sum(~isnan(allG_hg(1,:))));
steG_lg = 2.*std(smoG_lg,0,2,'omitnan')./sqrt(sum(~isnan(allG_lg(1,:))));
steG_bt = 2.*std(smoG_bt,0,2,'omitnan')./sqrt(sum(~isnan(allG_bt(1,:))));
steG_th = 2.*std(smoG_th,0,2,'omitnan')./sqrt(sum(~isnan(allG_th(1,:))));

%% 20. Normalize Power vs Time to Baseline Mean and SD

% calculate mean of baseline for each channel individually
meanD_allbase_hg = mean(smoD_hg(1:size(alignD_allbase_hg,1),:),'omitnan');
meanE_allbase_hg = mean(smoE_hg(1:size(alignE_allbase_hg,1),:),'omitnan');
meanF_allbase_hg = mean(smoF_hg(1:size(alignF_allbase_hg,1),:),'omitnan');
meanG_allbase_hg = mean(smoG_hg(1:size(alignG_allbase_hg,1),:),'omitnan');

meanD_allbase_lg = mean(smoD_hg(1:size(alignD_allbase_hg,1),:),'omitnan');
meanE_allbase_lg = mean(smoE_hg(1:size(alignE_allbase_hg,1),:),'omitnan');
meanF_allbase_lg = mean(smoF_hg(1:size(alignF_allbase_hg,1),:),'omitnan');
meanG_allbase_lg = mean(smoG_hg(1:size(alignG_allbase_hg,1),:),'omitnan');

meanD_allbase_bt = mean(smoD_hg(1:size(alignD_allbase_hg,1),:),'omitnan');
meanE_allbase_bt = mean(smoE_hg(1:size(alignE_allbase_hg,1),:),'omitnan');
meanF_allbase_bt = mean(smoF_hg(1:size(alignF_allbase_hg,1),:),'omitnan');
meanG_allbase_bt = mean(smoG_hg(1:size(alignG_allbase_hg,1),:),'omitnan');

meanD_allbase_th = mean(smoD_hg(1:size(alignD_allbase_hg,1),:),'omitnan');
meanE_allbase_th = mean(smoE_hg(1:size(alignE_allbase_hg,1),:),'omitnan');
meanF_allbase_th = mean(smoF_hg(1:size(alignF_allbase_hg,1),:),'omitnan');
meanG_allbase_th = mean(smoG_hg(1:size(alignG_allbase_hg,1),:),'omitnan');

% calculate sd of each baseline for each channel individually
sdD_allbase_hg = std(smoD_hg(1:size(alignD_allbase_hg,1),:),'omitnan');
sdE_allbase_hg = std(smoE_hg(1:size(alignE_allbase_hg,1),:),'omitnan');
sdF_allbase_hg = std(smoF_hg(1:size(alignF_allbase_hg,1),:),'omitnan');
sdG_allbase_hg = std(smoG_hg(1:size(alignG_allbase_hg,1),:),'omitnan');

sdD_allbase_lg = std(smoD_lg(1:size(alignD_allbase_lg,1),:),'omitnan');
sdE_allbase_lg = std(smoE_lg(1:size(alignE_allbase_lg,1),:),'omitnan');
sdF_allbase_lg = std(smoF_lg(1:size(alignF_allbase_lg,1),:),'omitnan');
sdG_allbase_lg = std(smoG_lg(1:size(alignG_allbase_lg,1),:),'omitnan');

sdD_allbase_bt = std(smoD_bt(1:size(alignD_allbase_bt,1),:),'omitnan');
sdE_allbase_bt = std(smoE_bt(1:size(alignE_allbase_bt,1),:),'omitnan');
sdF_allbase_bt = std(smoF_bt(1:size(alignF_allbase_bt,1),:),'omitnan');
sdG_allbase_bt = std(smoG_bt(1:size(alignG_allbase_bt,1),:),'omitnan');

sdD_allbase_th = std(smoD_th(1:size(alignD_allbase_th,1),:),'omitnan');
sdE_allbase_th = std(smoE_th(1:size(alignE_allbase_th,1),:),'omitnan');
sdF_allbase_th = std(smoF_th(1:size(alignF_allbase_th,1),:),'omitnan');
sdG_allbase_th = std(smoG_th(1:size(alignG_allbase_th,1),:),'omitnan');

% normalize each column separately
norBD_hg = (smoD_hg - meanD_allbase_hg) ./ sdD_allbase_hg;
norBE_hg = (smoE_hg - meanE_allbase_hg) ./ sdE_allbase_hg;
norBF_hg = (smoF_hg - meanF_allbase_hg) ./ sdF_allbase_hg;
norBG_hg = (smoG_hg - meanG_allbase_hg) ./ sdG_allbase_hg;

norBD_lg = (smoD_lg - meanD_allbase_lg) ./ sdD_allbase_lg;
norBE_lg = (smoE_lg - meanE_allbase_lg) ./ sdE_allbase_lg;
norBF_lg = (smoF_lg - meanF_allbase_lg) ./ sdF_allbase_lg;
norBG_lg = (smoG_lg - meanG_allbase_lg) ./ sdG_allbase_lg;

norBD_bt = (smoD_bt - meanD_allbase_bt) ./ sdD_allbase_bt;
norBE_bt = (smoE_bt - meanE_allbase_bt) ./ sdE_allbase_bt;
norBF_bt = (smoF_bt - meanF_allbase_bt) ./ sdF_allbase_bt;
norBG_bt = (smoG_bt - meanG_allbase_bt) ./ sdG_allbase_bt;

norBD_th = (smoD_th - meanD_allbase_th) ./ sdD_allbase_th;
norBE_th = (smoE_th - meanE_allbase_th) ./ sdE_allbase_th;
norBF_th = (smoF_th - meanF_allbase_th) ./ sdF_allbase_th;
norBG_th = (smoG_th - meanG_allbase_th) ./ sdG_allbase_th;

% Calculate the mean now
norBMeanD_hg = mean(norBD_hg,2,'omitnan');
norBMeanD_lg = mean(norBD_lg,2,'omitnan');
norBMeanD_bt = mean(norBD_bt,2,'omitnan');
norBMeanD_th = mean(norBD_th,2,'omitnan');

norBMeanE_hg = mean(norBE_hg,2,'omitnan');
norBMeanE_lg = mean(norBE_lg,2,'omitnan');
norBMeanE_bt = mean(norBE_bt,2,'omitnan');
norBMeanE_th = mean(norBE_th,2,'omitnan');

norBMeanF_hg = mean(norBF_hg,2,'omitnan');
norBMeanF_lg = mean(norBF_lg,2,'omitnan');
norBMeanF_bt = mean(norBF_bt,2,'omitnan');
norBMeanF_th = mean(norBF_th,2,'omitnan');

norBMeanG_hg = mean(norBG_hg,2,'omitnan');
norBMeanG_lg = mean(norBG_lg,2,'omitnan');
norBMeanG_bt = mean(norBG_bt,2,'omitnan');
norBMeanG_th = mean(norBG_th,2,'omitnan');

% calculate the 2 * standard error of the mean smoothed power
norBSteD_hg = 2.*std(norBD_hg,0,2,'omitnan')./sqrt(sum(~isnan(allD_hg(1,:))));
norBSteD_lg = 2.*std(norBD_lg,0,2,'omitnan')./sqrt(sum(~isnan(allD_hg(1,:))));
norBSteD_bt = 2.*std(norBD_bt,0,2,'omitnan')./sqrt(sum(~isnan(allD_hg(1,:))));
norBSteD_th = 2.*std(norBD_th,0,2,'omitnan')./sqrt(sum(~isnan(allD_hg(1,:))));

norBSteE_hg = 2.*std(norBE_hg,0,2,'omitnan')./sqrt(sum(~isnan(allE_hg(1,:))));
norBSteE_lg = 2.*std(norBE_lg,0,2,'omitnan')./sqrt(sum(~isnan(allE_hg(1,:))));
norBSteE_bt = 2.*std(norBE_bt,0,2,'omitnan')./sqrt(sum(~isnan(allE_hg(1,:))));
norBSteE_th = 2.*std(norBE_th,0,2,'omitnan')./sqrt(sum(~isnan(allE_hg(1,:))));

norBSteF_hg = 2.*std(norBF_hg,0,2,'omitnan')./sqrt(sum(~isnan(allF_hg(1,:))));
norBSteF_lg = 2.*std(norBF_lg,0,2,'omitnan')./sqrt(sum(~isnan(allF_hg(1,:))));
norBSteF_bt = 2.*std(norBF_bt,0,2,'omitnan')./sqrt(sum(~isnan(allF_hg(1,:))));
norBSteF_th = 2.*std(norBF_th,0,2,'omitnan')./sqrt(sum(~isnan(allF_hg(1,:))));

norBSteG_hg = 2.*std(norBG_hg,0,2,'omitnan')./sqrt(sum(~isnan(allG_hg(1,:))));
norBSteG_lg = 2.*std(norBG_lg,0,2,'omitnan')./sqrt(sum(~isnan(allG_hg(1,:))));
norBSteG_bt = 2.*std(norBG_bt,0,2,'omitnan')./sqrt(sum(~isnan(allG_hg(1,:))));
norBSteG_th = 2.*std(norBG_th,0,2,'omitnan')./sqrt(sum(~isnan(allG_hg(1,:))));

%% 21. Plot Power Normalized to Baseline over Time with 2xSEM Bounded Lines

lw = 1; % linewidth

% create time vectors for plotting time-course for each animal
tpD = [1:length(meanD_hg)].*10/60; % time in minutes
tpE = [1:length(meanE_hg)].*10/60; % time in minutes
tpF = [1:length(meanF_hg)].*10/60; % time in minutes
tpG = [1:length(meanG_hg)].*10/60; % time in minutes


xpos = .05; w = .9; h = .2; ypos = linspace(.95-h,.05,4)+.02;

figure('color','w','units','normalize','outerposition',[0 0 1 1])
subplot('position',[xpos ypos(1) w h])
[l,p]=boundedline(tpD,norBMeanD_hg,norBSteD_hg,'cmap',colorD,'-','alpha','transparency',0.2,'nan','gap');
set(l,'linewidth',lw), hold on, box off
[l,p]=boundedline(tpE,norBMeanE_hg,norBSteE_hg,'cmap',colorE,'-','alpha','transparency',0.2,'nan','gap');
set(l,'linewidth',lw), hold on, box off
[l,p]=boundedline(tpF,norBMeanF_hg,norBSteF_hg,'cmap',colorF,'-','alpha','transparency',0.2,'nan','gap');
set(l,'linewidth',lw), hold on, box off
[l,p]=boundedline(tpG,norBMeanG_hg,norBSteG_hg,'cmap',colorG,'-','alpha','transparency',0.2,'nan','gap');
set(l,'linewidth',lw), hold on, box off
% ylim([0 4e5])
ylabel('High Gamma')
xline(shortBase/6,'--','linewidth',2);
xline((shortBase+shortDrng)/6,'--','linewidth',2);
xlim([0 length(norBMeanG_hg)/6]);
% rectangle('position',[shortBase/6 -3 (shortDrng/6) 10],'facecolor',[[255 255 92]/255 0.7],'edgecolor','none'); hold on,...

subplot('position',[xpos ypos(2) w h])
[l,p]=boundedline(tpD,norBMeanD_lg,norBSteD_lg,'cmap',colorD,'-','alpha','transparency',0.2,'nan','gap');
set(l,'linewidth',lw), hold on, box off
[l,p]=boundedline(tpE,norBMeanE_lg,norBSteE_lg,'cmap',colorE,'-','alpha','transparency',0.2,'nan','gap');
set(l,'linewidth',lw), hold on, box off
[l,p]=boundedline(tpF,norBMeanF_lg,norBSteF_lg,'cmap',colorF,'-','alpha','transparency',0.2,'nan','gap');
set(l,'linewidth',lw), hold on, box off
[l,p]=boundedline(tpG,norBMeanG_lg,norBSteG_lg,'cmap',colorG,'-','alpha','transparency',0.2,'nan','gap');
set(l,'linewidth',lw), hold on, box off
% ylim([0 4e5])
ylabel('Low Gamma')
xline(shortBase/6,'--','linewidth',2);
xline((shortBase+shortDrng)/6,'--','linewidth',2);
xlim([0 length(norBMeanG_hg)/6]);

subplot('position',[xpos ypos(3) w h])
[l,p]=boundedline(tpD,norBMeanD_bt,norBSteD_bt,'cmap',colorD,'-','alpha','transparency',0.2,'nan','gap');
set(l,'linewidth',lw), hold on, box off
[l,p]=boundedline(tpE,norBMeanE_bt,norBSteE_bt,'cmap',colorE,'-','alpha','transparency',0.2,'nan','gap');
set(l,'linewidth',lw), hold on, box off
[l,p]=boundedline(tpF,norBMeanF_bt,norBSteF_bt,'cmap',colorF,'-','alpha','transparency',0.2,'nan','gap');
set(l,'linewidth',lw), hold on, box off
[l,p]=boundedline(tpG,norBMeanG_bt,norBSteG_bt,'cmap',colorG,'-','alpha','transparency',0.2,'nan','gap');
set(l,'linewidth',lw), hold on, box off
% ylim([0 4e5])
ylabel('Beta')
xline(shortBase/6,'--','linewidth',2);
xline((shortBase+shortDrng)/6,'--','linewidth',2);
xlim([0 length(norBMeanG_hg)/6]);

subplot('position',[xpos ypos(4) w h])
[l,p]=boundedline(tpD,norBMeanD_th,norBSteD_th,'cmap',colorD,'-','alpha','transparency',0.2,'nan','gap');
set(l,'linewidth',lw), hold on, box off
[l,p]=boundedline(tpE,norBMeanE_th,norBSteE_th,'cmap',colorE,'-','alpha','transparency',0.2,'nan','gap');
set(l,'linewidth',lw), hold on, box off
[l,p]=boundedline(tpF,norBMeanF_th,norBSteF_th,'cmap',colorF,'-','alpha','transparency',0.2,'nan','gap');
set(l,'linewidth',lw), hold on, box off
[l,p]=boundedline(tpG,norBMeanG_th,norBSteG_th,'cmap',colorG,'-','alpha','transparency',0.2,'nan','gap');
set(l,'linewidth',lw), hold on, box off
% ylim([0 4e5])
ylabel('Theta')
xlabel('Time (min)')
xline(shortBase/6,'--','linewidth',2);
xline((shortBase+shortDrng)/6,'--','linewidth',2);
xlim([0 length(norBMeanG_hg)/6]);
legend('','Monkey D','','Monkey E','','Monkey F','','Monkey G');

[~,ht] = suplabel('Power Normalized to Baseline','t',[.08 .13 .84 .84]);

% print -dpdf -painters normStimPowerDt_alignedStim

%% Local Functions

% function for placement of colorbar
function cbarset(xPos,yPos,w,h)
    c = colorbar; c.TickDirection = 'in';
    c.Location = 'manual';
    c.Position = [xPos+w yPos 0.0055 h];
    set(c, 'fontsize', 10);
    colorTitleHandle = get(c, 'ylabel'); titleString = 'Power (\muV^2/s)';
    set(colorTitleHandle, 'String', titleString, 'rotation', -90, 'fontsize', 10);
    pos = get(colorTitleHandle, 'position'); pos(1) = pos(1) + 2.5;
    set(colorTitleHandle, 'position', pos);
end